{"title":"proxy 基础学习","uid":"764ea20144bdcb36de34ee7af78c0567","slug":"proxy","date":"2021-04-06T14:27:28.313Z","updated":"2021-04-06T14:51:47.305Z","comments":true,"path":"api/articles/proxy.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200807160832237.jpg","content":"<h2 id=\"代理基础\"><a href=\"#代理基础\" class=\"headerlink\" title=\"代理基础\"></a>代理基础</h2><p><strong>什么是代理</strong></p>\n<p>代理是目标对象的抽象，类似于 c++的指针，可以用作目标的替身，又独立目标之外。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">&#x27;target&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.id);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// proxy的prototype是undefined</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>定义捕获器</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">&#x27;target&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;handler override&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.id);</span><br><span class=\"line\"><span class=\"comment\">// 只有代理才会产生捕获 原来的目标没有这样的行为</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>反射 API</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  id: <span class=\"string\">&#x27;target&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get handler&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;----------&#x27;</span>, proxy.id);</span><br></pre></td></tr></table></figure>\n\n<p><strong>捕获器不变式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(target, <span class=\"string\">&#x27;foo&#x27;</span>, &#123;</span><br><span class=\"line\">  configurable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  value: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;qux&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo);</span><br></pre></td></tr></table></figure>\n\n<p><strong>撤销代理</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;</span><br><span class=\"line\">  foo: <span class=\"string\">&#x27;bar&#x27;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> handler = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;intercepted&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; proxy, revoke &#125; = <span class=\"built_in\">Proxy</span>.revocable(target, handler);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo); <span class=\"comment\">// intercepted</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(target.foo); <span class=\"comment\">// bar</span></span><br><span class=\"line\">revoke();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy.foo); <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<p>**实用反射 API **</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 很多反射方法返回称作“状态标记”的布尔值，表示意图执行的操作是否成功</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(o, <span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;failure&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 使用代理之后</span></span><br><span class=\"line\"><span class=\"comment\">// 在定义新属性时如果发生问题，Reflect.defineProperty()会返回 false，而不是抛出错误。</span></span><br><span class=\"line\"><span class=\"comment\">// 因此使用这个反射方法可以这样重构上面的代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 重构后的代码</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">Reflect</span>.defineProperty(o, <span class=\"string\">&#x27;foo&#x27;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;)) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;success&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;failure&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他的<strong>状态标记</strong>反射 API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Reflect</span>.defineProperty();</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.preventExtensions();</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.setPrototypeOf();</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.set();</span><br><span class=\"line\"><span class=\"built_in\">Reflect</span>.deleteProperty();</span><br></pre></td></tr></table></figure>\n\n<p><strong>用一等函数替代操作符</strong></p>\n<p>以下反射方法提供只有通过操作符才能完成的操作。</p>\n<p>Reflect.get()：可以替代对象属性访问操作符。</p>\n<p>Reflect.set()：可以替代=赋值操作符。</p>\n<p>Reflect.has()：可以替代 in 操作符或 with()。</p>\n<p>Reflect.deleteProperty()：可以替代 delete 操作符。</p>\n<p>Reflect.construct()：可以替代 new 操作符。</p>\n<p><strong>代理的问题</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">userId</span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> \twm.set(<span class=\"built_in\">this</span>, userId);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">set</span> <span class=\"title\">id</span>(<span class=\"params\">userId</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> \twm.set(<span class=\"built_in\">this</span>, userId);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">get</span> <span class=\"title\">id</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> wm.get(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">由于这个实现依赖 User 实例的对象标识，在这个实例被代理的情况下就会出问题：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = <span class=\"keyword\">new</span> User(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user.id); <span class=\"comment\">// 123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> userInstanceProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(user, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userInstanceProxy.id); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是因为 User 实例一开始使用目标对象作为 WeakMap 的键，代理对象却尝试从自身取得这个实</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 例。要解决这个问题，就需要重新配置代理，把代理 User 实例改为代理 User 类本身。之后再创建代</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 理的实例就会以代理实例作为 WeakMap 的键了：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserClassProxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(User, &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyUser = <span class=\"keyword\">new</span> UserClassProxy(<span class=\"number\">456</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxyUser.id);  <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>代理与内部槽位</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">代理与内置引用类型（比如 Array）的实例通常可以很好地协同，但有些 ECMAScript 内置类型可</span></span><br><span class=\"line\"><span class=\"comment\">能会依赖代理无法控制的机制，结果导致在代理上调用某些方法会出错。</span></span><br><span class=\"line\"><span class=\"comment\">一个典型的例子就是 Date 类型。根据 ECMAScript 规范，Date 类型方法的执行依赖 this 值上的</span></span><br><span class=\"line\"><span class=\"comment\">内部槽位[[NumberDate]]。代理对象上不存在这个内部槽位，而且这个内部槽位的值也不能通过普通</span></span><br><span class=\"line\"><span class=\"comment\">的 get()和 set()操作访问到，于是代理拦截后本应转发给目标对象的方法会抛出 TypeError：</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(target, &#123;&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\">proxy.getDate(); <span class=\"comment\">// TypeError: &#x27;this&#x27; is not a Date object</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代理捕获器\"><a href=\"#代理捕获器\" class=\"headerlink\" title=\"代理捕获器\"></a>代理捕获器</h2><p><strong>get()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property, receiver</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.get(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.foo;</span><br></pre></td></tr></table></figure>\n\n<p>拦截的操作</p>\n<blockquote>\n<p>proxy.property</p>\n<p>proxy[property]</p>\n<p>Object.create(proxy)[property]</p>\n<p>Reflect.get(proxy, property, receiver)</p>\n</blockquote>\n<p><strong>set</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, property, value, receiver</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.set(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy.foo = <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 返回 true 表示成功；返回 false 表示失败，严格模式下会抛出 TypeError。</span></span><br></pre></td></tr></table></figure>\n\n<p>拦截的操作</p>\n<blockquote>\n<p>proxy.property = value</p>\n<p>proxy[property] = value</p>\n<p>Object.create(proxy)[property] = value</p>\n<p>Reflect.set(proxy, property, value, receiver)</p>\n</blockquote>\n<p><strong>has</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;has()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.has(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"string\">&#x27;foo&#x27;</span> <span class=\"keyword\">in</span> proxy;</span><br><span class=\"line\"><span class=\"comment\">// has()</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>property in proxy</p>\n<p>property in Object.create(proxy)</p>\n<p>with(proxy) {(property);}</p>\n<p>Reflect.has(proxy, property)</p>\n</blockquote>\n<p><strong>defineProperty()</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">defineProperty</span>(<span class=\"params\">target, property, descriptor</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;defineProperty()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.defineProperty(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(proxy, <span class=\"string\">&#x27;foo&#x27;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;bar&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">// Object.defineProperty(proxy, property, descriptor)</span></span><br><span class=\"line\"><span class=\"comment\">// Reflect.defineProperty(proxy, property, descriptor)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>getOwnPropertyDescriptor</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getOwnPropertyDescriptor</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;getOwnPropertyDescriptor()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.getOwnPropertyDescriptor(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(proxy, <span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// getOwnPropertyDescriptor()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Object.getOwnPropertyDescriptor(proxy, property)</span></span><br><span class=\"line\"><span class=\"comment\">// Reflect.getOwnPropertyDescriptor(proxy, property)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>deleteProperty</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">deleteProperty</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;deleteProperty()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.deleteProperty(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">delete</span> proxy.foo;</span><br><span class=\"line\"><span class=\"comment\">// deleteProperty()</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    delete proxy.property</span></span><br><span class=\"line\"><span class=\"comment\">    delete proxy[property]</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.deleteProperty(proxy, property)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>ownKeys</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;ownKeys()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.ownKeys(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(proxy);</span><br><span class=\"line\"><span class=\"comment\">// ownKeys()</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Object.getOwnPropertyNames(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    Object.getOwnPropertySymbols(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    Object.keys(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.ownKeys(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>getPrototypeOf</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getPrototypeOf</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;getPrototypeOf()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.getPrototypeOf(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getPrototypeOf(proxy);</span><br><span class=\"line\"><span class=\"comment\">// getPrototypeOf()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Object.getPrototypeOf(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.getPrototypeOf(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    proxy.__proto__</span></span><br><span class=\"line\"><span class=\"comment\">    Object.prototype.isProt</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>setPrototypeOf</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setPrototypeOf</span>(<span class=\"params\">target, prototype</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setPrototypeOf()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.setPrototypeOf(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(proxy, <span class=\"built_in\">Object</span>);</span><br><span class=\"line\"><span class=\"comment\">// setPrototypeOf()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    Object.setPrototypeOf(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.setPrototypeOf(proxy)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>isExtensible</strong></p>\n<p><strong>preventExtensions</strong></p>\n<p><strong>apply</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">target, thisArg, ...argumentsList</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;apply()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.apply(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">proxy();</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    proxy(...argumentsList)</span></span><br><span class=\"line\"><span class=\"comment\">    Function.prototype.apply(thisArg, argumentsList)</span></span><br><span class=\"line\"><span class=\"comment\">    Function.prototype.call(thisArg, ...argumentsList)</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.apply(target, thisArgument, argumentsList)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>construct</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myTarget = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(myTarget, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">construct</span>(<span class=\"params\">target, argumentsList, newTarget</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;construct()&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Reflect</span>.construct(...arguments);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">new</span> proxy();</span><br><span class=\"line\"><span class=\"comment\">// construct()</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    new proxy(...argumentsList)</span></span><br><span class=\"line\"><span class=\"comment\">    Reflect.construct(target, argumentsList, newTarget)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n","feature":null,"text":"代理基础什么是代理 代理是目标对象的抽象，类似于 c++的指针，可以用作目标的替身，又独立目标之外。 1234567891011const target = &#123; id: &#x27;target&#x27;,&#125;;const handler = &#123;&#...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E5%9F%BA%E7%A1%80\"><span class=\"toc-text\">代理基础</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86%E6%8D%95%E8%8E%B7%E5%99%A8\"><span class=\"toc-text\">代理捕获器</span></a></li></ol>","author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""},"mapped":true,"prev_post":{"title":"react base","uid":"b9a37f021de474295d3010955ace362e","slug":"react-base","date":"2021-04-06T14:27:28.342Z","updated":"2021-04-06T14:52:27.491Z","comments":true,"path":"api/articles/react-base.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"生命周期(老版) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768impo...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}},"next_post":{"title":"connected-react-router","uid":"3a1de7864b72f88f991d2ad903723f46","slug":"connected-react-router","date":"2021-04-06T14:27:28.294Z","updated":"2021-04-06T14:51:00.207Z","comments":true,"path":"api/articles/connected-react-router.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200815152729473.png","text":"index.js 12345import routerMiddlware from &#x27;./routerMiddlware&#x27;;import connectRouter from &#x27;./connectRouter&#x27;;import push fr...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}}}