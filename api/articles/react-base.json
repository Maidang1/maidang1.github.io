{"title":"react base","uid":"b9a37f021de474295d3010955ace362e","slug":"react-base","date":"2021-04-06T14:27:28.342Z","updated":"2021-04-06T14:52:27.491Z","comments":true,"path":"api/articles/react-base.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"生命周期-老版\"><a href=\"#生命周期-老版\" class=\"headerlink\" title=\"生命周期(老版)\"></a>生命周期(老版)</h2><span id=\"more\"></span>\n\n<p><img src=\"../img/5287253-315eac1c26082f08.webp\" alt=\"5287253-315eac1c26082f08\"></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\n\nclass LifeCycle extends Component &#123;\n  &#x2F;**组件的静态属性 *&#x2F;\n  static defaultProps &#x3D; &#123; name: &#39;计数器&#39; &#125;;\n  constructor(props) &#123;\n    &#x2F;** setup props and state *&#x2F;\n    super(props);\n    this.state &#x3D; &#123; number: 0 &#125;;\n    console.log(&#39;setup&#39;);\n  &#125;\n  componentWillMount() &#123;\n    console.log(&#39;2 组件将要挂载&#39;);\n  &#125;\n  componentDidMount() &#123;\n    console.log(&#39;4.组件挂载完成&#39;);\n  &#125;\n  shouldComponentUpdate() &#123;\n    console.log(&#39;5. 询问组件是否要更新&#39;);\n    return true;\n  &#125;\n  componentWillUpdate() &#123;\n    console.log(&#39;6 组件将要更新&#39;);\n  &#125;\n  componentDidUpdate() &#123;\n    console.log(&#39;7 组件已经更新完毕&#39;);\n  &#125;\n  add &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      number: this.state.number + 1,\n    &#125;);\n  &#125;;\n  render() &#123;\n    console.log(&#39;parent render&#39;);\n    return (\n      &lt;div&gt;\n        &lt;p&gt;&#123;this.state.name&#125;&lt;&#x2F;p&gt;\n        &lt;button onClick&#x3D;&#123;this.add&#125;&gt;+&lt;&#x2F;button&gt;\n        &lt;Sub &#x2F;&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nexport default LifeCycle;\n\nclass Sub extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; age: 10 &#125;;\n  &#125;\n  componentWillReceiveProps() &#123;\n    console.log(&#39;componentWillReceiveProps&#39;);\n  &#125;\n  render() &#123;\n    console.log(&#39;children render&#39;);\n    return (\n      &lt;div&gt;\n        &lt;p&gt;age:&#123;this.state.age&#125;&lt;&#x2F;p&gt;\n        &lt;button\n          onClick&#x3D;&#123;() &#x3D;&gt; &#123;\n            this.setState(&#123; age: this.state.age + 1 &#125;);\n          &#125;&#125;\n        &gt;&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"生命周期新版\"><a href=\"#生命周期新版\" class=\"headerlink\" title=\"生命周期新版\"></a>生命周期新版</h2><p><img src=\"../img/5287253-19b835e6e7802233.webp\" alt=\"5287253-19b835e6e7802233\"></p>\n<h3 id=\"getDerivedStateFromProps\"><a href=\"#getDerivedStateFromProps\" class=\"headerlink\" title=\"getDerivedStateFromProps\"></a>getDerivedStateFromProps</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\nclass Counter extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; number: 0 &#125;;\n  &#125;\n  add &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      number: this.state.number + 1,\n    &#125;);\n  &#125;;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;p&gt;&#123;this.state.number&#125;&lt;&#x2F;p&gt;\n        &lt;button onClick&#x3D;&#123;this.add&#125;&gt;+&lt;&#x2F;button&gt;\n        &lt;SubCounter number&#x3D;&#123;this.state.number&#125; &#x2F;&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nclass SubCounter extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; number: 0 &#125;;\n  &#125;\n  &#x2F;** 将State和Props传来的值全部整合到state上 *&#x2F;\n  static getDerivedStateFromProps(nextProps, prevState) &#123;\n    if (nextProps.number % 2 &#x3D;&#x3D;&#x3D; 0) &#123;\n      return &#123; number: nextProps.number * 2 &#125;;\n    &#125; else &#123;\n      return &#123; number: nextProps.number * 3 &#125;;\n    &#125;\n  &#125;\n  render() &#123;\n    return &lt;div&gt;&#123;this.state.number&#125;&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nexport default Counter;</code></pre>\n\n<h2 id=\"getSnapshotBeforeUpdate\"><a href=\"#getSnapshotBeforeUpdate\" class=\"headerlink\" title=\"getSnapshotBeforeUpdate\"></a>getSnapshotBeforeUpdate</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\nclass getSnapshotBeforeUpdateComponent extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.wrapper &#x3D; React.createRef();\n    this.state &#x3D; &#123; message: [&#39;5&#39;, &#39;4&#39;, &#39;3&#39;, &#39;2&#39;, &#39;1&#39;] &#125;;\n  &#125;\n\n  componentDidMount() &#123;\n    setInterval(() &#x3D;&gt; &#123;\n      this.setState(&#123;\n        message: [this.state.message.length, ...this.state.message],\n      &#125;);\n    &#125;, 1000);\n  &#125;\n\n  getSnapshotBeforeUpdate() &#123;\n    return this.wrapper.current.scrollHeight;\n  &#125;\n  componentDidUpdate(prevProps, prevState, scrollHeight) &#123;\n    let Dom &#x3D; this.wrapper.current;\n    Dom.scrollTop &#x3D; Dom.scrollTop + (Dom.scrollHeight - scrollHeight);\n  &#125;\n  render() &#123;\n    let style &#x3D; &#123;\n      height: &#39;100p&#39;,\n      width: &#39;200px&#39;,\n      border: &#39;1px solid red&#39;,\n      overflow: &#39;auto&#39;,\n    &#125;;\n    return (\n      &lt;div style&#x3D;&#123;style&#125; ref&#x3D;&#123;this.wrapper&#125;&gt;\n        &lt;ul&gt;\n          &#123;this.state.message.map((item, index) &#x3D;&gt; &#123;\n            return &lt;li key&#x3D;&#123;index&#125;&gt;&#123;item&#125;&lt;&#x2F;li&gt;;\n          &#125;)&#125;\n        &lt;&#x2F;ul&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nexport default getSnapshotBeforeUpdateComponent;</code></pre>\n\n<h2 id=\"context-上下文\"><a href=\"#context-上下文\" class=\"headerlink\" title=\"context(上下文)\"></a>context(上下文)</h2><h3 id=\"旧版\"><a href=\"#旧版\" class=\"headerlink\" title=\"旧版\"></a>旧版</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\nimport propTypes from &#39;prop-types&#39;;\nclass Page extends Component &#123;\n  static childContextTypes &#x3D; &#123;\n    color: propTypes.string,\n    setColor: propTypes.func,\n  &#125;;\n  getChildContext() &#123;\n    return &#123; color: &#39;gray&#39;, setColor: this.setColor &#125;;\n  &#125;\n\n  setColor &#x3D; (color) &#x3D;&gt; &#123;\n    this.setColor(&#123; color &#125;);\n  &#125;;\n  constructor() &#123;\n    super();\n    this.state &#x3D; &#123; color: &#39;gray&#39; &#125;;\n  &#125;\n  render() &#123;\n    return (\n      &lt;&gt;\n        &lt;Header&gt;\n          &lt;Title&gt;&lt;&#x2F;Title&gt;\n        &lt;&#x2F;Header&gt;\n        &lt;Main&gt;\n          &lt;Content&gt;&lt;&#x2F;Content&gt;\n        &lt;&#x2F;Main&gt;\n      &lt;&#x2F;&gt;\n    );\n  &#125;\n&#125;\n\nclass Header extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        Header\n        &lt;Title&gt;&lt;&#x2F;Title&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nclass Title extends Component &#123;\n  &#x2F;** 子集关系 *&#x2F;\n  static contextTypes &#x3D; &#123;\n    color: propTypes.string,\n    setColor: propTypes.func,\n  &#125;;\n  &#x2F;**\n   * this.context.color\n   * this.context.setColor\n   *&#x2F;\n\n  render() &#123;\n    return &lt;div&gt;Title&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nclass Main extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        Main\n        &lt;Content&gt;&lt;&#x2F;Content&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nclass Content extends Component &#123;\n  render() &#123;\n    return &lt;div&gt;Content&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nexport default Page;</code></pre>\n\n<h3 id=\"新版\"><a href=\"#新版\" class=\"headerlink\" title=\"新版\"></a>新版</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; import &#123; func &#125; from &#39;prop-types&#39;;\nimport React, &#123; Component &#125; from &#39;react&#39;;\n&#x2F;&#x2F; import propTypes from &#39;prop-types&#39;;\nconst ThemeContext &#x3D; React.createContext();\n&#x2F;**\n * ThemeContext &#x3D; &#123;Provider Consumer&#125;\n *\n *&#x2F;\n\n&#x2F;**-------- createContext -----------------------------------*&#x2F;\n\nfunction createContext() &#123;\n  class Provider extends Component &#123;\n    static value;\n    constructor(props) &#123;\n      super(props);\n      Provider.value &#x3D; props.value;\n    &#125;\n    render() &#123;\n      return this.props.children;\n    &#125;\n  &#125;\n\n  class Consumer extends Component &#123;\n    render() &#123;\n      return this.props.children(Provider.value);\n    &#125;\n  &#125;\n\n  return &#123; Provider, Consumer &#125;;\n&#125;\n\n&#x2F;**----------------------------------------------------------- *&#x2F;\n\nclass Page extends Component &#123;\n  constructor() &#123;\n    super();\n    this.state &#x3D; &#123; color: &#39;gray&#39; &#125;;\n  &#125;\n  setColor(color) &#123;\n    this.setState(&#123; color &#125;);\n  &#125;\n  render() &#123;\n    let ctx &#x3D; &#123; color: &#39;gray&#39;, setColor: this.setColor &#125;;\n    return (\n      &lt;ThemeContext.Provider value&#x3D;&#123;ctx&#125;&gt;\n        &lt;Header&gt;\n          &lt;Title&gt;&lt;&#x2F;Title&gt;\n        &lt;&#x2F;Header&gt;\n        &lt;Main&gt;\n          &lt;Content&gt;&lt;&#x2F;Content&gt;\n        &lt;&#x2F;Main&gt;\n      &lt;&#x2F;ThemeContext.Provider&gt;\n    );\n  &#125;\n&#125;\n\nclass Header extends Component &#123;\n  &#x2F;**----------------------------------------------- *&#x2F;\n  static contextType &#x3D; ThemeContext;\n  &#x2F;**----------------------------------------------- *&#x2F;\n\n  &#x2F;**\n   * this.context 拿到了所有的值\n   *&#x2F;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        Header\n        &lt;Title&gt;&lt;&#x2F;Title&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nfunction Title(props) &#123;\n  return &lt;div&gt;title&lt;&#x2F;div&gt;;\n&#125;\n\nclass Main extends Component &#123;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        Main\n        &lt;Content&gt;&lt;&#x2F;Content&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nclass Content extends Component &#123;\n  render() &#123;\n    return &lt;div&gt;Content&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nexport default Page;</code></pre>\n\n<h3 id=\"pureComponent\"><a href=\"#pureComponent\" class=\"headerlink\" title=\"pureComponent\"></a>pureComponent</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; PureComponent &#125; from &#39;react&#39;;\n\nclass Title extends PureComponent &#123;\n  render() &#123;\n    return &lt;div&gt;&#123;this.props.title&#125;&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nclass Counter extends PureComponent &#123;\n  render() &#123;\n    return &lt;div&gt;&#123;this.props.number&#125;&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nexport default class App extends PureComponent &#123;\n  constructor(props) &#123;\n    super(props);\n    this.props &#x3D; props;\n    this.state &#x3D; &#123; title: &#39;计数器&#39;, number: 0 &#125;;\n    this.inputRef &#x3D; React.createRef();\n  &#125;\n  add &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      number: this.state.number + parseInt(this.inputRef.current.value),\n    &#125;);\n  &#125;;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;Title title&#x3D;&#123;this.state.title&#125; &#x2F;&gt;\n        &lt;Counter number&#x3D;&#123;this.state.number&#125; &#x2F;&gt;\n        &lt;input ref&#x3D;&#123;inputRef&#125; &#x2F;&gt;\n        &lt;button onClick&#x3D;&#123;this.add&#125;&gt;+&lt;&#x2F;button&gt;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\n\nexport default class PureComponent extends Component &#123;\n  isPureComponent &#x3D; true;\n  shouldComponentUpdate(nextProps, nextState) &#123;\n    return (\n      !shallowEqual(this.props, nextProps) ||\n      !shallowEqual(this.state, nextState)\n    );\n  &#125;\n  render() &#123;\n    return &lt;div&gt;1&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nfunction shallowEqual(obj1, obj2) &#123;\n  if (obj1 &#x3D;&#x3D;&#x3D; obj2) return true;\n  if (\n    typeof obj1 !&#x3D;&#x3D; &#39;object&#39; ||\n    obj1 &#x3D;&#x3D;&#x3D; null ||\n    typeof obj2 !&#x3D;&#x3D; &#39;object&#39; ||\n    obj2 &#x3D;&#x3D;&#x3D; null\n  ) &#123;\n    return false;\n  &#125;\n\n  let keys1 &#x3D; Object.keys(obj1);\n  let keys2 &#x3D; Object.keys(obj2);\n  if (keys1.length !&#x3D;&#x3D; keys2.length) return false;\n\n  for (let key of keys1) &#123;\n    if (!obj2.hasOwnProperty(key)) &#123;\n      if (obj1[key] !&#x3D;&#x3D; obj2[key]) &#123;\n        if (typeof obj1[key] &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; typeof obj2[key] &#x3D;&#x3D;&#x3D; &#39;object&#39;) &#123;\n          return shallowEqual(obj1[key], obj2[key]);\n        &#125;\n      &#125; else &#123;\n        return false;\n      &#125;\n    &#125;\n  &#125;\n  return true;\n&#125;</code></pre>\n\n<h2 id=\"memo\"><a href=\"#memo\" class=\"headerlink\" title=\"memo\"></a>memo</h2><pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">import React, &#123; PureComponent &#125; from &#39;react&#39;;\n\nfunction memo(FunComponent) &#123;\n  return class Proxy extends PureComponent &#123;\n    render() &#123;\n      return FunComponent(this.props)\n    &#125;\n  &#125;;\n&#125;\nexport default memo;\n</code></pre>\n\n<h2 id=\"高阶组件\"><a href=\"#高阶组件\" class=\"headerlink\" title=\"高阶组件\"></a>高阶组件</h2><pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&#x2F;**\n * 高阶函数 传入一个函数 返回一个新的函数\n * 高阶组件 传入一个组件 返回一个新的组件\n *&#x2F;\n\nimport React from &#39;react&#39;;\nexport default function withLogger(Comp) &#123;\n  return class extends React.Component &#123;\n    componentWillMount() &#123;\n      this.start &#x3D; Date.now();\n    &#125;\n    componentDidMount() &#123;\n      console.log(Date.now() - this.start + &#39;ms&#39;);\n    &#125;\n\n    render() &#123;\n      return &lt;Comp &#123;...this.props&#125; &#x2F;&gt;;\n    &#125;\n  &#125;;\n&#125;\n</code></pre>\n\n<h2 id=\"render-props\"><a href=\"#render-props\" class=\"headerlink\" title=\"render props\"></a>render props</h2><pre class=\"line-numbers language-react\" data-language=\"react\"><code class=\"language-react\">&lt;MouseTracker&gt;\n\t&#123;\n        (props)&#x3D;&gt;&lt;Pirture &#123;...props&#125;&#x2F;&gt;\n    &#125;\n&lt;&#x2F;MouseTracker&gt;\n\n\nimport React, &#123; Component &#125; from &#39;react&#39;;\nclass MouseTracker extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; x: 0, y: 0 &#125;;\n  &#125;\n  handleMouseMove &#x3D; (event) &#x3D;&gt; &#123;\n    this.setState(&#123;\n      x: event.clientX,\n      y: event.clientY,\n    &#125;);\n  &#125;;\n  render() &#123;\n    return (\n      &lt;div onMouseOver&#x3D;&#123;this.handleMouseMove&#125;&gt;\n            &#x2F;* 执行子组件 函数组件*&#x2F;\n        &#123;this.props.children(&#123; x: this.state.x, y: this.state.y &#125;)&#125;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nexport default MouseTracker;\n</code></pre>\n\n<h2 id=\"Frament\"><a href=\"#Frament\" class=\"headerlink\" title=\"Frament\"></a>Frament</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&lt;React.Fragment&gt;</code></pre>\n\n<h2 id=\"protal\"><a href=\"#protal\" class=\"headerlink\" title=\"protal\"></a>protal</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\nimport ReactDOM from &#39;react-dom&#39;;\nclass Modal extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.modal &#x3D; document.getElementById(&#39;modal-root&#39;);\n  &#125;\n  render() &#123;\n    return ReactDOM.createPortal(this.props.children, this.modal);\n  &#125;\n&#125;\n\nclass Page extends Component &#123;\n  constructor(prop) &#123;\n    super(prop);\n    this.state &#x3D; &#123; show: false &#125;;\n  &#125;\n  toggleModal &#x3D; () &#x3D;&gt; &#123;\n    this.setState(&#123;\n      show: !this.state.show,\n    &#125;);\n  &#125;;\n  render() &#123;\n    return (\n      &lt;div&gt;\n        &lt;button onClick&#x3D;&#123;this.toggleModal&#125;&gt;关闭&#x2F;显示&lt;&#x2F;button&gt;\n        &#123;this.state.show &amp;&amp; (\n          &lt;Modal&gt;\n            &lt;div id&#x3D;&#39;modal&#39; className&#x3D;&#39;modal&#39;&gt;\n              &lt;div id&#x3D;&#39;content&#39; className&#x3D;&#39;content&#39;&gt;\n                Modal\n              &lt;&#x2F;div&gt;\n            &lt;&#x2F;div&gt;\n          &lt;&#x2F;Modal&gt;\n        )&#125;\n      &lt;&#x2F;div&gt;\n    );\n  &#125;\n&#125;\n\nexport default Page;</code></pre>\n\n<h2 id=\"错误边界\"><a href=\"#错误边界\" class=\"headerlink\" title=\"错误边界\"></a>错误边界</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Component &#125; from &#39;react&#39;;\nclass ErrorBoundary extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; hasErrors: false &#125;;\n  &#125;\n  &#x2F;* 捕获异常 检查错误*&#x2F;\n  componentDidCatch(err, info) &#123;\n    if (err) &#123;\n      this.setState(&#123;\n        hasErrors: true,\n      &#125;);\n    &#125;\n  &#125;\n  render() &#123;\n    if (this.state.hasErrors) &#123;\n      return &lt;div&gt; error&lt;&#x2F;div&gt;;\n    &#125; else &#123;\n      return this.props.children;\n    &#125;\n  &#125;\n&#125;\n\nclass Clock extends Component &#123;\n  render() &#123;\n    return &lt;div&gt;&#123;Date.now()&#125;&lt;&#x2F;div&gt;;\n  &#125;\n&#125;\n\nclass page extends Component &#123;\n  render() &#123;\n    return (\n      &lt;ErrorBoundary&gt;\n        &lt;Clock &#x2F;&gt;\n      &lt;&#x2F;ErrorBoundary&gt;\n    );\n  &#125;\n&#125;\n\nexport default page;</code></pre>\n","feature":null,"text":"生命周期(老版) import React, &#123; Component &#125; from &#39;react&#39;; class LifeCycle extends Component &#123; &#x2F;**组件的静态属性 *&#x2F; static...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-%E8%80%81%E7%89%88\"><span class=\"toc-text\">生命周期(老版)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%96%B0%E7%89%88\"><span class=\"toc-text\">生命周期新版</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#getDerivedStateFromProps\"><span class=\"toc-text\">getDerivedStateFromProps</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getSnapshotBeforeUpdate\"><span class=\"toc-text\">getSnapshotBeforeUpdate</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#context-%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">context(上下文)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A7%E7%89%88\"><span class=\"toc-text\">旧版</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B0%E7%89%88\"><span class=\"toc-text\">新版</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pureComponent\"><span class=\"toc-text\">pureComponent</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#memo\"><span class=\"toc-text\">memo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">高阶组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#render-props\"><span class=\"toc-text\">render props</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Frament\"><span class=\"toc-text\">Frament</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#protal\"><span class=\"toc-text\">protal</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C\"><span class=\"toc-text\">错误边界</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{"title":"react Hooks","uid":"fa08fd35cb36d755ed7492a61cf66138","slug":"react-hook","date":"2021-04-06T14:27:28.370Z","updated":"2021-04-06T14:53:18.661Z","comments":true,"path":"api/articles/react-hook.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"useState 每次渲染都是一个独立的闭包 每次渲染都会有自己的 props 和 state 每次渲染后会有自己的时间处理函数 function Counter() &#123; let [num, setNum] &#x3D; useState(0); function al...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"},{"name":"react hook","slug":"react-hook","count":1,"path":"api/tags/react-hook.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}},"next_post":{"title":"proxy 基础学习","uid":"764ea20144bdcb36de34ee7af78c0567","slug":"proxy","date":"2021-04-06T14:27:28.313Z","updated":"2021-04-06T14:51:47.305Z","comments":true,"path":"api/articles/proxy.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200807160832237.jpg","text":"代理基础什么是代理 代理是目标对象的抽象，类似于 c++的指针，可以用作目标的替身，又独立目标之外。 const target &#x3D; &#123; id: &#39;target&#39;, &#125;; const handler &#x3D; &#123;&#125...","link":"","photos":[],"count_time":{"symbolsCount":"8.5k","symbolsTime":"8 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":3,"path":"api/tags/JavaScript.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}