{"title":"react-setState","uid":"89dff2a6379feafc73b36875ccf71035","slug":"react-setState","date":"2021-04-06T14:27:28.394Z","updated":"2021-04-06T14:53:18.661Z","comments":true,"path":"api/articles/react-setState.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"react-state-流程\"><a href=\"#react-state-流程\" class=\"headerlink\" title=\"react-state 流程\"></a>react-state 流程</h2><span id=\"more\"></span>\n\n<h2 id=\"index-js\"><a href=\"#index-js\" class=\"headerlink\" title=\"index.js\"></a>index.js</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;** 事务 用wrapper包装起来 *&#x2F;\nclass Transaction &#123;\n  constructor(wrappers) &#123;\n    this.wrappers &#x3D; wrappers;\n  &#125;\n  &#x2F;** AOP 编程概念  *&#x2F;\n  perform(anyMethod) &#123;\n    this.wrappers.forEach((wrapper) &#x3D;&gt; wrapper.initialize());\n    anyMethod();\n    this.wrappers.forEach((wrapper) &#x3D;&gt; wrapper.close());\n  &#125;\n&#125;\nlet batchingStrategy &#x3D; &#123;\n  isBatchingStrates: false &#x2F;** 标记是否是批量更新模式 *&#x2F;,\n  dirtyComponent: [] &#x2F;** 脏组件 组件的状态和UI不匹配  *&#x2F;,\n  batchedUpdates() &#123;\n    &#x2F;** 执行所有的更新操作 *&#x2F;\n    this.dirtyComponent.forEach((component) &#x3D;&gt; component.updateComonent());\n  &#125;,\n&#125;;\nclass Updater &#123;\n  constructor(component) &#123;\n    this.component &#x3D; component;\n    this.pendingState &#x3D; [];\n  &#125;\n  addState(partcialState) &#123;\n    this.pendingState.push(partcialState);\n    &#x2F;** 判断是不是批量更新模式 如果是批量更新 将组件放到脏组件里 做到异步更新 *&#x2F;\n    batchingStrategy.isBatchingStrates\n      ? batchingStrategy.dirtyComponent.push(this.component)\n      : this.component.updateComonent();\n  &#125;\n&#125;\nclass Component &#123;\n  constructor(props) &#123;\n    this.props &#x3D; props;\n    this.$updater &#x3D; new Updater(this);\n  &#125;\n  createDOMFromDOMString(domString) &#123;\n    let div &#x3D; document.createElement(&#39;div&#39;);\n    div.innerHTML &#x3D; domString;\n    return div.children[0];\n  &#125;\n  setState(partcialState) &#123;\n    this.$updater.addState(partcialState);\n  &#125;\n\n  &#x2F;** 组件的更新方法 合并所有的状态 然后进行统一的页面元素UI的替换 *&#x2F;\n  updateComonent() &#123;\n    this.$updater.pendingState.forEach((partcialState) &#x3D;&gt;\n      Object.assign(this.setState, partcialState)\n    );\n    this.$updater.pendingState.length &#x3D; 0; &#x2F;** 清空队列 *&#x2F;\n    let oldElemet &#x3D; this.domElement;\n    let newElement &#x3D; this.renderElement();\n    oldElemet.parentElement.replaceChild(newElement, oldElemet);\n  &#125;\n\n  &#x2F;** 创建页面元素 *&#x2F;\n  renderElement() &#123;\n    let htmlString &#x3D; this.render();\n    this.domElement &#x3D; this.createDOMFromDOMString(htmlString);\n    this.domElement.component &#x3D; this;\n    return this.domElement;\n  &#125;\n\n  &#x2F;** 组件的挂载方法  *&#x2F;\n  mount(container) &#123;\n    container.appendChild(this.renderElement());\n  &#125;\n&#125;\n\nlet transaction &#x3D; new Transaction([\n  &#123;\n    initialize() &#123;\n      &#x2F;** 事件开启的时候进入批量更新模式  *&#x2F;\n      batchingStrategy.isBatchingStrates &#x3D; true;\n    &#125;,\n    close() &#123;\n      &#x2F;** 事件结束的时候关闭批量更新模式  *&#x2F;\n      batchingStrategy.isBatchingStrates &#x3D; false;\n      &#x2F;** 脏组件进行状态的更新 *&#x2F;\n      batchingStrategy.batchedUpdates();\n    &#125;,\n  &#125;,\n]);\n\n&#x2F;** 统一的事件处理 挂载到全局  *&#x2F;\nwindow.trigger &#x3D; function (event, mothodName) &#123;\n  &#x2F;** 拿到组件的实例(事件委托) 执行绑定的方法 *&#x2F;\n  let component &#x3D; event.target.component;\n  &#x2F;** wrapper包装起来 处理一些相关的事件 *&#x2F;\n  transaction.perform(component[mothodName].bind(component));\n&#125;;\n\n&#x2F;** 子组件 *&#x2F;\nclass Counter extends Component &#123;\n  constructor(props) &#123;\n    super(props);\n    this.state &#x3D; &#123; number: 0 &#125;;\n  &#125;\n  add() &#123;\n    this.setState(&#123; number: this.state.number + 1 &#125;);\n  &#125;\n\n  render() &#123;\n    return &#96;&lt;button onclick&#x3D;&quot;trigger(event, &#39;add&#39;)&quot;&gt;$&#123;this.state.number&#125;&lt;&#x2F;button&gt;&#96;;\n  &#125;\n&#125;</code></pre>\n\n<h2 id=\"index-html\"><a href=\"#index-html\" class=\"headerlink\" title=\"index.html\"></a>index.html</h2><pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">&lt;!DOCTYPE html&gt;\n&lt;html lang&#x3D;&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;\n    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot; &#x2F;&gt;\n    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot; &#x2F;&gt;\n    &lt;title&gt;Document&lt;&#x2F;title&gt;\n  &lt;&#x2F;head&gt;\n  &lt;body&gt;\n    &lt;div id&#x3D;&quot;count-app&quot;&gt;&lt;&#x2F;div&gt;\n  &lt;&#x2F;body&gt;\n  &lt;script src&#x3D;&quot;.&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;\n  &lt;script&gt;\n    let countApp &#x3D; document.getElementById(&#39;count-app&#39;);\n    let res &#x3D; new Counter().render();\n    res.mount(countApp);\n  &lt;&#x2F;script&gt;\n&lt;&#x2F;html&gt;</code></pre>\n","feature":null,"text":"react-state 流程 index.js&#x2F;** 事务 用wrapper包装起来 *&#x2F; class Transaction &#123; constructor(wrappers) &#123; this.wrappers &#x3D; wrappers;...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":9,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":9,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#react-state-%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">react-state 流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#index-js\"><span class=\"toc-text\">index.js</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#index-html\"><span class=\"toc-text\">index.html</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{"title":"redux && redux-middleware","uid":"f45f275952c50e73ccfd35d25a4b9c92","slug":"redux && redux-middleware","date":"2021-04-06T14:27:28.404Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/redux && redux-middleware.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"redux import &#123; createStore &#125; from &#39;redux&#39;; let INC &#x3D; Symbol.for(&#39;INC&#39;); let DEC &#x3D; Symbol.for(&#39;DEC&#3...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"React","slug":"React","count":9,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":9,"path":"api/tags/React.json"},{"name":"redux","slug":"redux","count":1,"path":"api/tags/redux.json"},{"name":"redux-middleware","slug":"redux-middleware","count":1,"path":"api/tags/redux-middleware.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}},"next_post":{"title":"react-router-dom","uid":"50552075ed1d1cbaae410e21993db179","slug":"react-router-dom","date":"2021-04-06T14:27:28.383Z","updated":"2021-04-06T14:52:45.563Z","comments":true,"path":"api/articles/react-router-dom.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"BrowserRouter import React, &#123; Component &#125; from &#39;react&#39;; import Context from &#39;.&#x2F;context&#39;; let pushState &#x3D;...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"React","slug":"React","count":9,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":9,"path":"api/tags/React.json"},{"name":"react-router-dom","slug":"react-router-dom","count":1,"path":"api/tags/react-router-dom.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}