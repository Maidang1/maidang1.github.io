{"title":"Symbol 基础学习","uid":"ba2efac7316616866db1719079267951","slug":"symbol","date":"2021-04-06T14:27:28.412Z","updated":"2021-04-06T14:53:18.661Z","comments":true,"path":"api/articles/symbol.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"Symbol-内置符号\"><a href=\"#Symbol-内置符号\" class=\"headerlink\" title=\"Symbol 内置符号\"></a>Symbol 内置符号</h2><blockquote>\n<p>ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。这些内置符号最重要的用途之一是重新定义它们，从而改变原生结构的行为。比如，我们知道 <strong>for-of</strong> 循环会在相关对象上使用 <strong>Symbol.iterator</strong> 属性，那么就可以通过在自定义对象上重新定义 Symbol.iterator 的值，来改变 for-of 在迭代该对象时的行为。这些内置符号也没有什么特别之处，它们就是全局函数 Symbol 的普通字符串属性，指向一个符号的实例。所有内置符号属性都是不可写、不可枚举、不可配置的。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p><strong>Symbol.asyncIterator</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for-await-of 实现调用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">max</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.max = max;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.asyncIdx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> *[<span class=\"built_in\">Symbol</span>.asyncIterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.asyncIdx &lt; <span class=\"built_in\">this</span>.max) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> resolve(<span class=\"built_in\">this</span>.asyncIdx++));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncCount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> Emitter(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"keyword\">await</span> (<span class=\"keyword\">const</span> x <span class=\"keyword\">of</span> emitter) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">asyncCount();</span><br><span class=\"line\"><span class=\"comment\">// 0 1 2 3 4</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol.hasInstance</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// instanceof 调用</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol.isConcatSpreadable</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用concat的时候会不会被打平</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> initial = [<span class=\"string\">&#x27;foo&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arrayLikeObject = &#123; <span class=\"attr\">length</span>: <span class=\"number\">1</span>, <span class=\"number\">0</span>: <span class=\"string\">&#x27;baz&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arrayLikeObject[<span class=\"built_in\">Symbol</span>.isConcatSpreadable]); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(initial.concat(arrayLikeObject)); <span class=\"comment\">// [&#x27;foo&#x27;, &#123;...&#125;]</span></span><br><span class=\"line\">arrayLikeObject[<span class=\"built_in\">Symbol</span>.isConcatSpreadable] = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(initial.concat(arrayLikeObject)); <span class=\"comment\">// [&#x27;foo&#x27;, &#x27;baz&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  [ &#x27;foo&#x27;, &#123; &#x27;0&#x27;: &#x27;baz&#x27;, length: 1 &#125; ]</span></span><br><span class=\"line\"><span class=\"comment\">  [ &#x27;foo&#x27;, &#x27;baz&#x27; ]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol.iterator</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Emitter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">max</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.max = max;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">this</span>.idx &lt; <span class=\"built_in\">this</span>.max) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"built_in\">this</span>.idx++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">count</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> Emitter(<span class=\"number\">5</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> x <span class=\"keyword\">of</span> emitter) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">count();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol.match</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// String.prototype.match() 调用</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Symbol.replace</strong><br><strong>Symbol.search</strong><br><strong>Symbol.split</strong></p>\n<p><strong>Symbol.toPrimitive</strong><br><strong>Symbol.toStringTag</strong></p>\n","feature":null,"text":"Symbol 内置符号 ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。这些内置符号最重要的用途之一是重新定义它们...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Symbol-%E5%86%85%E7%BD%AE%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">Symbol 内置符号</span></a></li></ol>","author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""},"mapped":true,"prev_post":{"title":"dataFetchHook","uid":"eb7ed51aa22769817771964a330ff0d5","slug":"useFetchData","date":"2021-04-06T14:27:28.438Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/useFetchData.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"Encapsulating data request with hook 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}},"next_post":{"title":"redux && redux-middleware","uid":"f45f275952c50e73ccfd35d25a4b9c92","slug":"redux && redux-middleware","date":"2021-04-06T14:27:28.404Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/redux && redux-middleware.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"redux 1234567891011121314151617181920212223242526272829303132333435363738394041import &#123; createStore &#125; from &#x27;redux&#x27;;let I...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"},{"name":"redux","slug":"redux","count":1,"path":"api/tags/redux.json"},{"name":"redux-middleware","slug":"redux-middleware","count":1,"path":"api/tags/redux-middleware.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}}}