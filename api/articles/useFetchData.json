{"title":"React Hooks 简单用法","uid":"c6b8115d77691cd594407092998f8ad6","slug":"useFetchData","date":"2021-04-06T14:27:28.438Z","updated":"2021-04-11T10:40:54.567Z","comments":true,"path":"api/articles/useFetchData.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"Encapsulating-data-request-with-hook\"><a href=\"#Encapsulating-data-request-with-hook\" class=\"headerlink\" title=\"Encapsulating data request with hook\"></a>Encapsulating data request with hook</h2><span id=\"more\"></span>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Fragment, useState, useEffect &#125; from &#39;react&#39;;\nimport axios from &#39;axios&#39;;\n\nfunction App() &#123;\n  const [data, setData] &#x3D; useState(&#123; hits: [] &#125;);\n  const [query, setQuery] &#x3D; useState(&#39;redux&#39;);\n  const [url, setUrl] &#x3D; useState(\n    &#39;https:&#x2F;&#x2F;hn.algolia.com&#x2F;api&#x2F;v1&#x2F;search?query&#x3D;redux&#39;\n  );\n  const [isLoading, setIsLoading] &#x3D; useState(false);\n  const [isError, setIsError] &#x3D; useState(false);\n\n  useEffect(() &#x3D;&gt; &#123;\n    const fetchData &#x3D; async () &#x3D;&gt; &#123;\n      setIsError(false);\n      setIsLoading(true);\n\n      try &#123;\n        const result &#x3D; await axios(url);\n\n        setData(result.data);\n      &#125; catch (error) &#123;\n        setIsError(true);\n      &#125;\n\n      setIsLoading(false);\n    &#125;;\n\n    fetchData();\n  &#125;, [url]);\n  return (\n    &lt;Fragment&gt;\n      &lt;input\n        type&#x3D;&#39;text&#39;\n        value&#x3D;&#123;query&#125;\n        onChange&#x3D;&#123;(event) &#x3D;&gt; setQuery(event.target.value)&#125;\n      &#x2F;&gt;\n      &lt;button\n        type&#x3D;&#39;button&#39;\n        onClick&#x3D;&#123;() &#x3D;&gt;\n          setUrl(&#96;http:&#x2F;&#x2F;hn.algolia.com&#x2F;api&#x2F;v1&#x2F;search?query&#x3D;$&#123;query&#125;&#96;)\n        &#125;\n      &gt;\n        Search\n      &lt;&#x2F;button&gt;\n\n      &#123;isError &amp;&amp; &lt;div&gt;Something went wrong ...&lt;&#x2F;div&gt;&#125;\n\n      &#123;isLoading ? (\n        &lt;div&gt;Loading ...&lt;&#x2F;div&gt;\n      ) : (\n        &lt;ul&gt;\n          &#123;data.hits.map((item) &#x3D;&gt; (\n            &lt;li key&#x3D;&#123;item.objectID&#125;&gt;\n              &lt;a href&#x3D;&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;&#x2F;a&gt;\n            &lt;&#x2F;li&gt;\n          ))&#125;\n        &lt;&#x2F;ul&gt;\n      )&#125;\n    &lt;&#x2F;Fragment&gt;\n  );\n&#125;\nexport default App;</code></pre>\n\n<h2 id=\"Custom-hook\"><a href=\"#Custom-hook\" class=\"headerlink\" title=\"Custom hook\"></a>Custom hook</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import React, &#123; Fragment, useState, useEffect &#125; from &#39;react&#39;;\nimport axios from &#39;axios&#39;;\n\nconst useDataApi &#x3D; (initialUrl, initialData) &#x3D;&gt; &#123;\n  const [data, setData] &#x3D; useState(initialData);\n  const [url, setUrl] &#x3D; useState(initialUrl);\n  const [isLoading, setIsLoading] &#x3D; useState(false);\n  const [isError, setIsError] &#x3D; useState(false);\n\n  useEffect(() &#x3D;&gt; &#123;\n    const fetchData &#x3D; async () &#x3D;&gt; &#123;\n      setIsError(false);\n      setIsLoading(true);\n\n      try &#123;\n        const result &#x3D; await axios(url);\n\n        setData(result.data);\n      &#125; catch (error) &#123;\n        setIsError(true);\n      &#125;\n\n      setIsLoading(false);\n    &#125;;\n\n    fetchData();\n  &#125;, [url]);\n\n  return [&#123; data, isLoading, isError &#125;, setUrl];\n&#125;;\n\nfunction App() &#123;\n  const [query, setQuery] &#x3D; useState(&#39;redux&#39;);\n  const [&#123; data, isLoading, isError &#125;, doFetch] &#x3D; useDataApi(\n    &#39;https:&#x2F;&#x2F;hn.algolia.com&#x2F;api&#x2F;v1&#x2F;search?query&#x3D;redux&#39;,\n    &#123;\n      hits: [],\n    &#125;\n  );\n\n  return (\n    &lt;Fragment&gt;\n      &lt;form\n        onSubmit&#x3D;&#123;(event) &#x3D;&gt; &#123;\n          doFetch(&#96;http:&#x2F;&#x2F;hn.algolia.com&#x2F;api&#x2F;v1&#x2F;search?query&#x3D;$&#123;query&#125;&#96;);\n\n          event.preventDefault();\n        &#125;&#125;\n      &gt;\n        &lt;input\n          type&#x3D;&#39;text&#39;\n          value&#x3D;&#123;query&#125;\n          onChange&#x3D;&#123;(event) &#x3D;&gt; setQuery(event.target.value)&#125;\n        &#x2F;&gt;\n        &lt;button type&#x3D;&#39;submit&#39;&gt;Search&lt;&#x2F;button&gt;\n      &lt;&#x2F;form&gt;\n\n      &#123;isError &amp;&amp; &lt;div&gt;Something went wrong ...&lt;&#x2F;div&gt;&#125;\n\n      &#123;isLoading ? (\n        &lt;div&gt;Loading ...&lt;&#x2F;div&gt;\n      ) : (\n        &lt;ul&gt;\n          &#123;data.hits.map((item) &#x3D;&gt; (\n            &lt;li key&#x3D;&#123;item.objectID&#125;&gt;\n              &lt;a href&#x3D;&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;&#x2F;a&gt;\n            &lt;&#x2F;li&gt;\n          ))&#125;\n        &lt;&#x2F;ul&gt;\n      )&#125;\n    &lt;&#x2F;Fragment&gt;\n  );\n&#125;\n\nexport default App;</code></pre>\n\n<h2 id=\"useToggle\"><a href=\"#useToggle\" class=\"headerlink\" title=\"useToggle\"></a>useToggle</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; useCallback, useState &#125; from &#39;react&#39;;\nfunction App() &#123;\n  const [isTextChanged, setIsTextChanged] &#x3D; useToggle();\n  return (\n    &lt;button onClick&#x3D;&#123;setIsTextChanged&#125;&gt;\n      &#123;isTextChanged ? &#39;Toggled&#39; : &#39;Click to Toggle&#39;&#125;\n    &lt;&#x2F;button&gt;\n  );\n&#125;\nconst useToggle &#x3D; (initialState: boolean &#x3D; false): [boolean, any] &#x3D;&gt; &#123;\n  const [state, setState] &#x3D; useState &lt; boolean &gt; initialState;\n  const toggle &#x3D; useCallback((): void &#x3D;&gt; setState((state) &#x3D;&gt; !state), []);\n  return [state, toggle];\n&#125;;</code></pre>\n","feature":null,"text":"Encapsulating data request with hook import React, &#123; Fragment, useState, useEffect &#125; from &#39;react&#39;; import axios from &#39;...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":9,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":9,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Encapsulating-data-request-with-hook\"><span class=\"toc-text\">Encapsulating data request with hook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Custom-hook\"><span class=\"toc-text\">Custom hook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#useToggle\"><span class=\"toc-text\">useToggle</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{"title":"Vue3 响应式原理","uid":"b491bd34f265533799a79211838a0e41","slug":"vue3-reactive","date":"2021-04-06T14:27:28.471Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/vue3-reactive.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"简单的实现 Vue3 响应式原理 let toProxy &#x3D; new WeakMap(); &#x2F;&#x2F; 原对象：代理过得对象 let toRaw &#x3D; new WeakMap(); &#x2F;&#x2F; 被代理过得对象: 原对象 functio...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"vue","slug":"vue","count":5,"path":"api/categories/vue.json"}],"tags":[{"name":"vue3","slug":"vue3","count":1,"path":"api/tags/vue3.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}},"next_post":{"title":"Symbol 基础学习","uid":"ba2efac7316616866db1719079267951","slug":"symbol","date":"2021-04-06T14:27:28.412Z","updated":"2021-04-06T14:53:18.661Z","comments":true,"path":"api/articles/symbol.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"Symbol 内置符号 ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。这些内置符号最重要的用途之一是重新定义它们...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}