{"title":"dataFetchHook","uid":"eb7ed51aa22769817771964a330ff0d5","slug":"useFetchData","date":"2021-04-06T14:27:28.438Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/useFetchData.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"Encapsulating-data-request-with-hook\"><a href=\"#Encapsulating-data-request-with-hook\" class=\"headerlink\" title=\"Encapsulating data request with hook\"></a>Encapsulating data request with hook</h2><span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(&#123; <span class=\"attr\">hits</span>: [] &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = useState(<span class=\"string\">&#x27;redux&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [url, setUrl] = useState(</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://hn.algolia.com/api/v1/search?query=redux&#x27;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoading, setIsLoading] = useState(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isError, setIsError] = useState(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fetchData = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      setIsError(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      setIsLoading(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> axios(url);</span><br><span class=\"line\"></span><br><span class=\"line\">        setData(result.data);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        setIsError(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      setIsLoading(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData();</span><br><span class=\"line\">  &#125;, [url]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      &lt;input</span><br><span class=\"line\">        type=<span class=\"string\">&#x27;text&#x27;</span></span><br><span class=\"line\">        value=&#123;query&#125;</span><br><span class=\"line\">        onChange=&#123;<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class=\"line\">      /&gt;</span><br><span class=\"line\">      &lt;button</span><br><span class=\"line\">        type=<span class=\"string\">&#x27;button&#x27;</span></span><br><span class=\"line\">        onClick=&#123;<span class=\"function\">() =&gt;</span></span><br><span class=\"line\">          setUrl(<span class=\"string\">`http://hn.algolia.com/api/v1/search?query=<span class=\"subst\">$&#123;query&#125;</span>`</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        Search</span><br><span class=\"line\">      &lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;isError &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Something went wrong ...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;isLoading ? (</span><br><span class=\"line\">        &lt;div&gt;Loading ...&lt;/div&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &#123;data.hits.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (</span><br><span class=\"line\">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class=\"line\">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">          ))&#125;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Fragment&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Custom-hook\"><a href=\"#Custom-hook\" class=\"headerlink\" title=\"Custom hook\"></a>Custom hook</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Fragment, useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useDataApi = <span class=\"function\">(<span class=\"params\">initialUrl, initialData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [data, setData] = useState(initialData);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [url, setUrl] = useState(initialUrl);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isLoading, setIsLoading] = useState(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [isError, setIsError] = useState(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  useEffect(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fetchData = <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">      setIsError(<span class=\"literal\">false</span>);</span><br><span class=\"line\">      setIsLoading(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> axios(url);</span><br><span class=\"line\"></span><br><span class=\"line\">        setData(result.data);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">        setIsError(<span class=\"literal\">true</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      setIsLoading(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    fetchData();</span><br><span class=\"line\">  &#125;, [url]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [&#123; data, isLoading, isError &#125;, setUrl];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">App</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [query, setQuery] = useState(<span class=\"string\">&#x27;redux&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [&#123; data, isLoading, isError &#125;, doFetch] = useDataApi(</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://hn.algolia.com/api/v1/search?query=redux&#x27;</span>,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      hits: [],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Fragment&gt;</span><br><span class=\"line\">      &lt;form</span><br><span class=\"line\">        onSubmit=&#123;<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          doFetch(<span class=\"string\">`http://hn.algolia.com/api/v1/search?query=<span class=\"subst\">$&#123;query&#125;</span>`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          event.preventDefault();</span><br><span class=\"line\">        &#125;&#125;</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">        &lt;input</span><br><span class=\"line\">          type=<span class=\"string\">&#x27;text&#x27;</span></span><br><span class=\"line\">          value=&#123;query&#125;</span><br><span class=\"line\">          onChange=&#123;<span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> setQuery(event.target.value)&#125;</span><br><span class=\"line\">        /&gt;</span><br><span class=\"line\">        &lt;button type=<span class=\"string\">&#x27;submit&#x27;</span>&gt;Search&lt;/button&gt;</span><br><span class=\"line\">      &lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;isError &amp;&amp; <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Something went wrong ...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#123;isLoading ? (</span><br><span class=\"line\">        &lt;div&gt;Loading ...&lt;/div&gt;</span><br><span class=\"line\">      ) : (</span><br><span class=\"line\">        &lt;ul&gt;</span><br><span class=\"line\">          &#123;data.hits.map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> (</span><br><span class=\"line\">            &lt;li key=&#123;item.objectID&#125;&gt;</span><br><span class=\"line\">              &lt;a href=&#123;item.url&#125;&gt;&#123;item.title&#125;&lt;/a&gt;</span><br><span class=\"line\">            &lt;/li&gt;</span><br><span class=\"line\">          ))&#125;</span><br><span class=\"line\">        &lt;/ul&gt;</span><br><span class=\"line\">      )&#125;</span><br><span class=\"line\">    &lt;/Fragment&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br></pre></td></tr></table></figure>\n","feature":null,"text":"Encapsulating data request with hook 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":7,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":7,"path":"api/tags/React.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Encapsulating-data-request-with-hook\"><span class=\"toc-text\">Encapsulating data request with hook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Custom-hook\"><span class=\"toc-text\">Custom hook</span></a></li></ol>","author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""},"mapped":true,"prev_post":{"title":"Vue3 响应式原理","uid":"b491bd34f265533799a79211838a0e41","slug":"vue3-reactive","date":"2021-04-06T14:27:28.471Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/vue3-reactive.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"简单的实现 Vue3 响应式原理 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"vue","slug":"vue","count":2,"path":"api/categories/vue.json"}],"tags":[{"name":"vue3","slug":"vue3","count":1,"path":"api/tags/vue3.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}},"next_post":{"title":"Symbol 基础学习","uid":"ba2efac7316616866db1719079267951","slug":"symbol","date":"2021-04-06T14:27:28.412Z","updated":"2021-04-06T14:53:18.661Z","comments":true,"path":"api/articles/symbol.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"Symbol 内置符号 ECMAScript 6 也引入了一批常用内置符号（well-known symbol），用于暴露语言内部行为，开发者可以直接访问、重写或模拟这些行为。这些内置符号都以 Symbol 工厂函数字符串属性的形式存在。这些内置符号最重要的用途之一是重新定义它们...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":2,"path":"api/tags/JavaScript.json"}],"author":{"name":"麦当","avatar":"http://image.vulpix.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210326214030.jpg","link":""}}}