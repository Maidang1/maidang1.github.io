{"title":"Vue3 响应式原理","uid":"b491bd34f265533799a79211838a0e41","slug":"vue3-reactive","date":"2021-04-06T14:27:28.471Z","updated":"2021-04-06T14:53:18.660Z","comments":true,"path":"api/articles/vue3-reactive.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"简单的实现-Vue3-响应式原理\"><a href=\"#简单的实现-Vue3-响应式原理\" class=\"headerlink\" title=\"简单的实现 Vue3 响应式原理\"></a>简单的实现 Vue3 响应式原理</h2><span id=\"more\"></span>\n\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">let toProxy &#x3D; new WeakMap(); &#x2F;&#x2F; 原对象：代理过得对象\nlet toRaw &#x3D; new WeakMap(); &#x2F;&#x2F; 被代理过得对象: 原对象\nfunction isObject(val) &#123;\n  return typeof val &#x3D;&#x3D;&#x3D; &#39;object&#39; &amp;&amp; val !&#x3D;&#x3D; null;\n&#125;\n\nfunction reactive(target) &#123;\n  return createReactiveObject(target);\n&#125;\n\nfunction hasOwn(target, key) &#123;\n  return target.hasOwnProperty(key);\n&#125;\n\nlet proxy &#x3D; reactive(&#123; name: &#39;zf&#39; &#125;);\n\nfunction createReactiveObject(target) &#123;\n  if (!isObject(target)) return target;\n\n  &#x2F;&#x2F; 处理多次代理的操作\n  let proxy &#x3D; toProxy.get(target);\n  if (proxy) return proxy;\n  if (toRaw.has(target)) return target;\n  let baseHandler &#x3D; &#123;\n    get(target, key, receiver) &#123;\n      let res &#x3D; Reflect.get(target, key, receiver);\n      &#x2F;&#x2F; 实现多层代理\n\n      track(target, key);\n      return isObject(res) ? reactive(res) : res;\n    &#125;,\n    set(target, key, value, receiver) &#123;\n      let hadKey &#x3D; hasOwn(target, key);\n      let oldValue &#x3D; target[key];\n      let res &#x3D; Reflect.set(target, key, value, receiver);\n      if (!hadKey) &#123;\n        &#x2F;&#x2F; 增加属性\n        trigger(target, &#39;add&#39;, key);\n      &#125; else if (oldValue !&#x3D;&#x3D; value) &#123;\n        &#x2F;&#x2F; 修改属性 屏蔽没有意义的更新\n        trigger(target, &#39;set&#39;, key);\n      &#125;\n      return res;\n    &#125;,\n    deleteProperty(target, key) &#123;\n      let res &#x3D; Reflect.defineProperty(target, key);\n      return res;\n    &#125;,\n  &#125;;\n  let proxy &#x3D; new Proxy(target, baseHandler);\n  toProxy.set(target, proxy);\n  toRaw.set(proxy, target);\n  return proxy;\n&#125;\n\n&#x2F;&#x2F; 依赖收集 发布订阅\n\nlet activeEffectStacks &#x3D; [];\nlet targetsMap &#x3D; new WeakMap();\nfunction track(target, key) &#123;\n  let effect &#x3D; activeEffectStacks[activeEffectStacks.length - 1];\n  if (effect) &#123;\n    let depMap &#x3D; targetsMap.get(target);\n    if (!depMap) &#123;\n      targetsMap.set(target, (depMap &#x3D; new Map()));\n    &#125;\n    let deps &#x3D; depMap.get(key);\n    if (!deps) &#123;\n      depMap, set(key, (deps &#x3D; new Set()));\n    &#125;\n\n    if (!deps.has(effect)) &#123;\n      deps.add(effect);\n    &#125;\n  &#125;\n&#125;\n\nfunction trigger(target, type, key) &#123;\n  let depsMap &#x3D; targetsMap.get(target);\n  if (depsMap) &#123;\n    let deps &#x3D; depsMap.get(key);\n    if (deps) &#123;\n      deps.forEach((effect) &#x3D;&gt; &#123;\n        effect();\n      &#125;);\n    &#125;\n  &#125;\n&#125;\n\nfunction effect(fn) &#123;\n  &#x2F;&#x2F; fn是响应的\n  let effect &#x3D; createReactiveEffect(fn);\n  effect();\n&#125;\n\nfunction createReactiveEffect(fn) &#123;\n  let effect &#x3D; function () &#123;\n    return run(effect, fn);\n  &#125;;\n  return effect;\n&#125;\n\nfunction run(effect, fn) &#123;\n  try &#123;\n    activeEffectStacks.push(effect);\n    fn();\n  &#125; finally &#123;\n    activeEffectStacks.pop();\n  &#125;\n&#125;</code></pre>\n","feature":null,"text":"简单的实现 Vue3 响应式原理 let toProxy &#x3D; new WeakMap(); &#x2F;&#x2F; 原对象：代理过得对象 let toRaw &#x3D; new WeakMap(); &#x2F;&#x2F; 被代理过得对象: 原对象 functio...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"vue","slug":"vue","count":5,"path":"api/categories/vue.json"}],"tags":[{"name":"vue3","slug":"vue3","count":1,"path":"api/tags/vue3.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9E%E7%8E%B0-Vue3-%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">简单的实现 Vue3 响应式原理</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{"title":"Vuex 源码分析","uid":"d99453202fb96ed4663408801fbf0008","slug":"vuex","date":"2021-04-06T14:27:28.497Z","updated":"2021-04-06T14:53:15.200Z","comments":true,"path":"api/articles/vuex.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"vuex 简易实现 let Vue; class ModuleCollection &#123; constructor(options) &#123; this.register([], options); &#125; register(path, rootModule) &...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"vue","slug":"vue","count":5,"path":"api/categories/vue.json"}],"tags":[{"name":"vuex","slug":"vuex","count":2,"path":"api/tags/vuex.json"},{"name":"vue","slug":"vue","count":3,"path":"api/tags/vue.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}},"next_post":{"title":"React Hooks 简单用法","uid":"c6b8115d77691cd594407092998f8ad6","slug":"useFetchData","date":"2021-04-06T14:27:28.438Z","updated":"2021-04-11T10:40:54.567Z","comments":true,"path":"api/articles/useFetchData.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"Encapsulating data request with hook import React, &#123; Fragment, useState, useEffect &#125; from &#39;react&#39;; import axios from &#39;...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"React","slug":"React","count":8,"path":"api/categories/React.json"}],"tags":[{"name":"React","slug":"React","count":8,"path":"api/tags/React.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}