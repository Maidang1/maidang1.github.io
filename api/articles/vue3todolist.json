{"title":"vue3 TodoList","uid":"71e26c228348b0d18f5bc168efb57865","slug":"vue3todolist","date":"2021-05-04T10:50:16.000Z","updated":"2021-05-04T10:55:21.016Z","comments":true,"path":"api/articles/vue3todolist.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Maidang1/image@master/img/building-6214718_1920.jpg","content":"<h2 id=\"App-vue\"><a href=\"#App-vue\" class=\"headerlink\" title=\"App.vue\"></a>App.vue</h2><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class&#x3D;&quot;wrapper&quot;&gt;\n    &lt;TotoInput &#x2F;&gt;\n    &lt;TodoList :todoList&#x3D;&quot;todoList&quot; &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; computed, defineComponent, onMounted &#125; from &#39;vue&#39;\nimport &#123; Store, useStore &#125; from &#39;vuex&#39;;\nimport TotoInput from &#39;.&#x2F;components&#x2F;TodoInput&#x2F;index.vue&#39;\nimport TodoList from &#39;.&#x2F;components&#x2F;TodoList&#x2F;index.vue&#39;\nimport &#123; useTodo &#125; from &#39;.&#x2F;hooks&#39;;\n\nexport default defineComponent(&#123;\n  name: &#39;App&#39;,\n  components: &#123;\n    TotoInput,\n    TodoList\n  &#125;,\n  setup() &#123;\n    const &#123; setTodoList &#125; &#x3D; useTodo();\n    const store: Store&lt;any&gt; &#x3D; useStore()\n    onMounted(() &#x3D;&gt; &#123;\n      setTodoList();\n    &#125;)\n    return &#123;\n      todoList: computed(() &#x3D;&gt; store.state.list)\n    &#125;\n  &#125;\n\n&#125;);\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h2><pre class=\"line-numbers language-vue\" data-language=\"vue\"><code class=\"language-vue\">&#x2F;&#x2F; TodoInput&#x2F;index.vue\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;todovalue&quot; @keyup&#x3D;&quot;setTodoValue&quot; &#x2F;&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; defineComponent, ref &#125; from &#39;vue&#39;\nimport &#123; useTodo &#125; from &#39;..&#x2F;..&#x2F;hooks&#x2F;index&#39;\nexport default defineComponent(&#123;\n  name: &#39;todoinput&#39;,\n  setup() &#123;\n    const todovalue &#x3D; ref&lt;string&gt;(&#39;&#39;)\n    const &#123; setTodo &#125; &#x3D; useTodo()\n    const setTodoValue &#x3D; (e: KeyboardEvent): void &#x3D;&gt; &#123;\n      if (e.keyCode &#x3D;&#x3D;&#x3D; 13 &amp;&amp; todovalue.value.trim().length) &#123;\n        setTodo(todovalue.value);\n        todovalue.value &#x3D; &#39;&#39;\n      &#125;\n    &#125;\n    return &#123;\n      todovalue,\n      setTodoValue\n    &#125;\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;\n\n&#x2F;&#x2F; TodoItem&#x2F;index.vue\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;input type&#x3D;&quot;checkbox&quot; :checked&#x3D;&quot;item.status &#x3D;&#x3D;&#x3D; FINISH&quot; @click&#x3D;&quot;setStatus(item.id)&quot; &#x2F;&gt;\n    &lt;span :class&#x3D;&quot;item.status &#x3D;&#x3D;&#x3D; FINISH ? &#39;line-through&#39; : &#39;&#39;&quot;&gt;&#123;&#123; item.content &#125;&#125;&#123;&#123; item.status &#125;&#125;&lt;&#x2F;span&gt;\n    &lt;button @click&#x3D;&quot;removeTodo(item.id)&quot;&gt;删除&lt;&#x2F;button&gt;\n    &lt;button\n      v-if&#x3D;&quot;item.status !&#x3D;&#x3D; FINISH&quot;\n      @click&#x3D;&quot;setDoing(item.id)&quot;\n      :class&#x3D;&quot;item.status &#x3D;&#x3D;&#x3D; DOING ? &#39;doing&#39; : &#39;willdo&#39;&quot;\n    &gt;&#123;&#123; item.status &#x3D;&#x3D;&#x3D; DOING ? &#39;正在做&#39; : &#39;马上做&#39; &#125;&#125;&lt;&#x2F;button&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport &#123; ITodo, TODO_STATUS &#125; from &#39;@&#x2F;types&#39;;\nimport &#123; defineComponent, PropType &#125; from &#39;vue&#39;\n\nexport default defineComponent(&#123;\n  name: &#39;todoitem&#39;,\n  props: &#123;\n    item: &#123;\n      type: Object as PropType&lt;ITodo&gt;,\n      required: true\n    &#125;\n  &#125;,\n  setup(props, &#123; emit &#125;) &#123;\n    const statusState &#x3D; &#123;\n      DOING: TODO_STATUS.DOING,\n      FINISH: TODO_STATUS.FINISH,\n      WILLDO: TODO_STATUS.WILLDO\n    &#125;\n\n    const removeTodo &#x3D; (id: number) &#x3D;&gt; &#123;\n      emit(&#39;removeTodo&#39;, id)\n    &#125;\n    const setDoing &#x3D; (id: number) &#x3D;&gt; &#123;\n      emit(&#39;setDoing&#39;, id)\n\n    &#125;\n    const setStatus &#x3D; (id: number) &#x3D;&gt; &#123;\n      emit(&#39;setStatus&#39;, id)\n\n    &#125;\n\n\n    return &#123;\n      ...statusState,\n      removeTodo,\n      setDoing,\n      setStatus,\n    &#125;\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;\n\n&lt;style&gt;\n.line-through &#123;\n  text-decoration: line-through;\n&#125;\n.doing &#123;\n  background-color: #cdcdcd;\n  color: #ccc;\n&#125;\n.willdo &#123;\n  background-color: orange;\n  color: #fff;\n&#125;\n&lt;&#x2F;style&gt;\n&#x2F;&#x2F; TodoList&#x2F;index.vue\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;TodoItem\n      v-for&#x3D;&quot;item of todoList&quot;\n      :key&#x3D;&quot;item.id&quot;\n      :item&#x3D;&quot;item&quot;\n      @removeTodo&#x3D;&quot;removeTodo&quot;\n      @setStatus&#x3D;&quot;setStatus&quot;\n      @setDoing&#x3D;&quot;setDoing&quot;\n    &gt;&lt;&#x2F;TodoItem&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;template&gt;\n\n&lt;script lang&#x3D;&quot;ts&quot;&gt;\nimport TodoItem from &#39;..&#x2F;TodoItem&#x2F;index.vue&#39;\nimport &#123; defineComponent, PropType &#125; from &#39;vue&#39;\nimport &#123; ITodo &#125; from &#39;@&#x2F;types&#39;;\nimport &#123; useTodo &#125; from &#39;@&#x2F;hooks&#39;;\nexport default defineComponent(&#123;\n  name: &#39;todolist&#39;,\n  props: &#123;\n    todoList: Array as PropType&lt;ITodo[]&gt;\n  &#125;,\n  components: &#123;\n    TodoItem\n  &#125;,\n  setup() &#123;\n    const &#123; removeTodo, setStatus, setDoing &#125; &#x3D; useTodo();\n    return &#123;\n      removeTodo,\n      setStatus,\n      setDoing\n    &#125;\n  &#125;\n&#125;)\n&lt;&#x2F;script&gt;</code></pre>\n\n\n\n<h2 id=\"hooks\"><a href=\"#hooks\" class=\"headerlink\" title=\"hooks\"></a>hooks</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;\n  SET_TODO,\n  SET_TODO_LIST,\n  REMOVE_TODO,\n  SET_TODO_STATUS,\n  SET_DOING_STATUS,\n&#125; from &quot;@&#x2F;store&#x2F;actionTypes&quot;;\nimport &#123; ITodo, TODO_STATUS &#125; from &quot;@&#x2F;types&quot;;\nimport &#123; watch &#125; from &quot;@vue&#x2F;runtime-core&quot;;\nimport &#123; Store, useStore &#125; from &quot;vuex&quot;;\n\ninterface IUseTodo &#123;\n  setTodo: (value: string) &#x3D;&gt; void;\n  setTodoList: () &#x3D;&gt; void;\n  removeTodo: (id: number) &#x3D;&gt; void;\n  setStatus: (id: number) &#x3D;&gt; void;\n  setDoing: (id: number) &#x3D;&gt; void;\n&#125;\n\ninterface IUseLocalStorage &#123;\n  getLocalList: () &#x3D;&gt; ITodo[];\n  setLocalList: (todoList: ITodo[]) &#x3D;&gt; void;\n&#125;\nfunction useTodo(): IUseTodo &#123;\n  const store: Store&lt;any&gt; &#x3D; useStore();\n  const &#123; setLocalList, getLocalList &#125; &#x3D; useLocalStorage();\n  const todoList: ITodo[] &#x3D; getLocalList();\n  watch(\n    () &#x3D;&gt; store.state.list,\n    (todoList) &#x3D;&gt; &#123;\n      setLocalList(todoList);\n    &#125;\n  );\n  function setTodo(value: string): void &#123;\n    const todo: ITodo &#x3D; &#123;\n      id: new Date().getTime(),\n      content: value,\n      status: TODO_STATUS.WILLDO,\n    &#125;;\n    store.dispatch(SET_TODO, todo);\n  &#125;\n  function setTodoList() &#123;\n    store.dispatch(SET_TODO_LIST, todoList);\n  &#125;\n  function removeTodo(id: number) &#123;\n    store.dispatch(REMOVE_TODO, id);\n  &#125;\n  function setStatus(id: number) &#123;\n    store.dispatch(SET_TODO_STATUS, id);\n  &#125;\n  function setDoing(id: number) &#123;\n    store.dispatch(SET_DOING_STATUS, id);\n  &#125;\n\n  return &#123;\n    setTodo,\n    setTodoList,\n    removeTodo,\n    setStatus,\n    setDoing,\n  &#125;;\n&#125;\n\nfunction useLocalStorage(): IUseLocalStorage &#123;\n  function getLocalList(): ITodo[] &#123;\n    return JSON.parse(localStorage.getItem(&quot;todoList&quot;) || &quot;[]&quot;);\n  &#125;\n  function setLocalList(todoList: ITodo[]): void &#123;\n    localStorage.setItem(&quot;todoList&quot;, JSON.stringify(todoList));\n  &#125;\n  return &#123;\n    getLocalList,\n    setLocalList,\n  &#125;;\n&#125;\n\nexport &#123; useTodo, useLocalStorage &#125;;\n</code></pre>\n\n<h2 id=\"types\"><a href=\"#types\" class=\"headerlink\" title=\"types\"></a>types</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">interface ITodo &#123;\n  id: number;\n  content: string;\n  status: TODO_STATUS;\n&#125;\n\nenum TODO_STATUS &#123;\n  WILLDO &#x3D; &quot;willdo&quot;,\n  DOING &#x3D; &quot;doing&quot;,\n  FINISH &#x3D; &quot;finish&quot;,\n&#125;\ninterface IState &#123;\n  list: ITodo[];\n&#125;\n\nexport &#123; ITodo, TODO_STATUS, IState &#125;;\n</code></pre>\n\n\n\n<h2 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; index.ts\nimport &#123; createStore &#125; from &quot;vuex&quot;;\nimport state from &quot;.&#x2F;state&quot;;\nimport mutations from &quot;.&#x2F;mutations&quot;;\nimport actions from &quot;.&#x2F;actions&quot;;\n\nexport default createStore(&#123;\n  state,\n  mutations,\n  actions,\n&#125;);\n&#x2F;&#x2F; state.ts\nimport &#123; IState &#125; from &quot;..&#x2F;types&#x2F;index&quot;;\nexport default &lt;IState&gt;&#123;\n  list: [],\n&#125;;\n\n&#x2F;&#x2F; action.ts\nimport &#123; IState, ITodo &#125; from &quot;@&#x2F;types&quot;;\nimport &#123; Commit &#125; from &quot;vuex&quot;;\nimport &#123;\n  SET_TODO,\n  SET_TODO_LIST,\n  REMOVE_TODO,\n  SET_TODO_STATUS,\n  SET_DOING_STATUS,\n&#125; from &quot;.&#x2F;actionTypes&quot;;\n\ninterface ICtx &#123;\n  commit: Commit;\n  state: IState;\n&#125;\n\nexport default &#123;\n  [SET_TODO](&#123; commit &#125;: ICtx, todo: ITodo): void &#123;\n    commit(SET_TODO, todo);\n  &#125;,\n  [SET_TODO_LIST](&#123; commit &#125;: ICtx, todoList: ITodo[]): void &#123;\n    commit(SET_TODO_LIST, todoList);\n  &#125;,\n  [REMOVE_TODO](&#123; commit &#125;: ICtx, id: number): void &#123;\n    commit(REMOVE_TODO, id);\n  &#125;,\n  [SET_TODO_STATUS](&#123; commit &#125;: ICtx, id: number): void &#123;\n    commit(SET_TODO_STATUS, id);\n  &#125;,\n  [SET_DOING_STATUS](&#123; commit &#125;: ICtx, id: number): void &#123;\n    commit(SET_DOING_STATUS, id);\n  &#125;,\n&#125;;\n\n&#x2F;&#x2F; actionType.ts\nexport const SET_TODO &#x3D; &quot;SET_TODO&quot;;\nexport const SET_TODO_LIST &#x3D; &quot;SET_TODO_LIST&quot;;\nexport const REMOVE_TODO &#x3D; &quot;REMOVE_TODO&quot;;\nexport const SET_TODO_STATUS &#x3D; &quot;SET_TODO_STATUS&quot;;\nexport const SET_DOING_STATUS &#x3D; &quot;SET_DOING_STATUS&quot;;\n\n&#x2F;&#x2F; mutations.ts\nimport &#123; IState, ITodo, TODO_STATUS &#125; from &quot;@&#x2F;types&quot;;\nimport &#123;\n  SET_TODO,\n  SET_TODO_LIST,\n  REMOVE_TODO,\n  SET_TODO_STATUS,\n  SET_DOING_STATUS,\n&#125; from &quot;.&#x2F;actionTypes&quot;;\nimport state from &quot;.&#x2F;state&quot;;\n\nexport default &#123;\n  [SET_TODO](state: IState, todo: ITodo): void &#123;\n    state.list &#x3D; [todo, ...state.list];\n  &#125;,\n  [SET_TODO_LIST](state: IState, todoList: ITodo[]): void &#123;\n    state.list &#x3D; todoList;\n  &#125;,\n  [REMOVE_TODO](state: IState, id: number) &#123;\n    state.list &#x3D; state.list.filter((item: ITodo) &#x3D;&gt; &#123;\n      return item.id !&#x3D; id;\n    &#125;);\n  &#125;,\n  [SET_TODO_STATUS](status: IState, id: number) &#123;\n    state.list &#x3D; state.list.map((item: ITodo) &#x3D;&gt; &#123;\n      if (item.id &#x3D;&#x3D; id) &#123;\n        switch (item.status) &#123;\n          case TODO_STATUS.FINISH:\n            item.status &#x3D; TODO_STATUS.WILLDO;\n            break;\n          case TODO_STATUS.WILLDO:\n          case TODO_STATUS.DOING:\n            item.status &#x3D; TODO_STATUS.FINISH;\n            break;\n          default:\n            break;\n        &#125;\n      &#125;\n      return item;\n    &#125;);\n  &#125;,\n  [SET_DOING_STATUS](state: IState, id: number) &#123;\n    state.list &#x3D; state.list.map((item) &#x3D;&gt; &#123;\n      if (item.status &#x3D;&#x3D;&#x3D; TODO_STATUS.DOING) &#123;\n        item.status &#x3D; TODO_STATUS.WILLDO;\n      &#125;\n      if (item.id &#x3D;&#x3D; id) &#123;\n        item.status &#x3D; TODO_STATUS.DOING;\n      &#125;\n      return item;\n    &#125;);\n  &#125;,\n&#125;;\n</code></pre>\n\n","feature":null,"text":"App.vue&lt;template&gt; &lt;div class&#x3D;&quot;wrapper&quot;&gt; &lt;TotoInput &#x2F;&gt; &lt;TodoList :todoList&#x3D;&quot;todoList&quot;...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"vue","slug":"vue","count":4,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":2,"path":"api/tags/vue.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#App-vue\"><span class=\"toc-text\">App.vue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#components\"><span class=\"toc-text\">components</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#hooks\"><span class=\"toc-text\">hooks</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#types\"><span class=\"toc-text\">types</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#store\"><span class=\"toc-text\">store</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{},"next_post":{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"函数式编程","date":"2021-04-24T03:54:13.000Z","updated":"2021-04-24T03:54:13.650Z","comments":true,"path":"api/articles/函数式编程.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"函数式编程 对运算过程的抽象 x –&gt;f(联系,映射)–&gt; y y = f(x) 用来描述数据之间的映射 &#x2F;&#x2F; 非函数 let a &#x3D; 1; let b &#x3D; 2; let sum &#x3D; a + b; console.lo...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}