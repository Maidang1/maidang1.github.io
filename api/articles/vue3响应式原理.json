{"title":"vue3响应式API原理","uid":"b23d813ab87380625160f23e617b9635","slug":"vue3响应式原理","date":"2021-05-15T10:50:15.000Z","updated":"2021-05-15T10:55:30.095Z","comments":true,"path":"api/articles/vue3响应式原理.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Maidang1/image@master/img/eclipse-1492818_1920.jpg","content":"<blockquote>\n<p>vue3响应式API的简单实现</p>\n</blockquote>\n<h2 id=\"reactive\"><a href=\"#reactive\" class=\"headerlink\" title=\"reactive\"></a>reactive</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123;\n  isObject,\n  isSymbol,\n  isArray,\n  isInteger,\n  hasOwnProperty,\n  hasOwn,\n  hasChange,\n&#125; from &quot;..&#x2F;share&#x2F;index&quot;;\nimport &#123; track, trigger &#125; from &quot;.&#x2F;effect&quot;;\n\nfunction createGetter() &#123;\n  return function get(target, key, receiver) &#123;\n    const res &#x3D; Reflect.get(target, key, receiver);\n    &#x2F;&#x2F; res symbol 忽略\n    if (isSymbol(key)) &#123;\n      return res;\n    &#125;\n\n    &#x2F;&#x2F; 进行依赖收集\n    track(target, key);\n    &#x2F;&#x2F; 懒递归\n    if (isObject(res)) &#123;\n      return reactive(res);\n    &#125;\n\n    return res;\n  &#125;;\n&#125;\nfunction createSetter() &#123;\n  return function set(target, key, value, receiver) &#123;\n    const oldValue &#x3D; target[key];\n    const hadKey &#x3D;\n      isArray(target) &amp;&amp; isInteger(key)\n        ? Number(key) &lt; target.length\n        : hasOwn(target, key);\n    const result &#x3D; Reflect.set(target, key, value, receiver);\n\n    if (!hadKey) &#123;\n      &#x2F;&#x2F; 新增操作\n      trigger(target, &quot;add&quot;, key, value);\n    &#125; else if (hasChange(oldValue, value)) &#123;\n      &#x2F;&#x2F; 修改操作\n      trigger(target, &quot;set&quot;, key, value, oldValue);\n    &#125;\n\n    return result;\n  &#125;;\n&#125;\nconst set &#x3D; createSetter();\nconst get &#x3D; createGetter();\n\nconst mutableHandlers &#x3D; &#123;\n  get,\n  set,\n&#125;;\n\nexport function reactive(target: object) &#123;\n  return createReactiveObj(target, mutableHandlers);\n&#125;\n\nconst proxyMap &#x3D; new WeakMap();\n\nfunction createReactiveObj(target: object, mutableHandlers: any) &#123;\n  if (!isObject(target)) &#123;\n    return target;\n  &#125;\n  &#x2F;&#x2F; 取出代理过得数据\n  const existingProxy &#x3D; proxyMap.get(target);\n  if (existingProxy) &#123;\n    return existingProxy;\n  &#125;\n  const proxy &#x3D; new Proxy(target, mutableHandlers);\n  proxyMap.set(target, proxy);\n  return proxy;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"effect\"><a href=\"#effect\" class=\"headerlink\" title=\"effect\"></a>effect</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; isArray, isInteger &#125; from &quot;..&#x2F;share&#x2F;index&quot;;\n\nlet activeEffect; &#x2F;&#x2F; 存储effect函数 以后会执行\nlet uid &#x3D; 0;\nconst effectStack &#x3D; [];\nfunction createReactiveEffect(fn, options) &#123;\n  const effect &#x3D; function () &#123;\n    &#x2F;&#x2F; 防止递归执行\n    if (!effectStack.includes(effectStack)) &#123;\n      try &#123;\n        activeEffect &#x3D; effect;\n        effectStack.push(activeEffect);\n        return fn(); &#x2F;&#x2F; 用户写的逻辑 内部会有取值的操作 再去取值的时候 应该执行这个activeEffect\n      &#125; finally &#123;\n        effectStack.pop();\n        activeEffect &#x3D; effectStack[effectStack.length - 1];\n      &#125;\n    &#125;\n  &#125;;\n  effect.id &#x3D; uid++;\n  effect.deps &#x3D; []; &#x2F;&#x2F; 表示effect 依赖了那些属性\n  effect.options &#x3D; options;\n  return effect;\n&#125;\nexport function effect(fn, options: any &#x3D; &#123;&#125;) &#123;\n  const effect &#x3D; createReactiveEffect(fn, options);\n  if (!options.lazy) &#123;\n    effect();\n  &#125;\n  return effect;\n&#125;\n\nconst targetMap &#x3D; new WeakMap();\n&#x2F;&#x2F; 属性和effect关联\n&#x2F;&#x2F; &#123;object:&#123;key: [effect]&#125;&#125;\nexport function track(target, key) &#123;\n  if (!activeEffect) return;\n\n  let depsMap &#x3D; targetMap.get(target);\n  if (!depsMap) &#123;\n    targetMap.set(target, (depsMap &#x3D; new Map()));\n  &#125;\n  let dep &#x3D; depsMap.get(key);\n  if (!dep) &#123;\n    depsMap.set(key, (dep &#x3D; new Set()));\n  &#125;\n\n  if (!dep.has(activeEffect)) &#123;\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep); &#x2F;&#x2F; 双向记忆\n  &#125;\n&#125;\n\n&#x2F;&#x2F; 触发更新\nexport function trigger(target, type, key, value?, oldValue?) &#123;\n  const depsMap &#x3D; targetMap.get(target);\n  if (!depsMap) return;\n\n  const run &#x3D; (effects) &#x3D;&gt; &#123;\n    if (effects.options.scheduler) &#123;\n      effects.options.scheduler();\n    &#125; else if (effects) effects.forEach((effect) &#x3D;&gt; effect());\n  &#125;;\n\n  &#x2F;&#x2F; 数组的特殊情况\n  if (key &#x3D;&#x3D;&#x3D; &quot;length&quot; &amp;&amp; isArray(target)) &#123;\n    depsMap.forEach((dep, key) &#x3D;&gt; &#123;\n      &#x2F;&#x2F; 如果改的长度小于数组的长度 更新视图\n      if (key &#x3D;&#x3D; &quot;length&quot; || key &gt;&#x3D; value) &#123;\n        run(dep);\n      &#125;\n    &#125;);\n  &#125; else &#123;\n    &#x2F;&#x2F; 对象的处理\n    if (key !&#x3D;&#x3D; void 0) &#123;\n      run(depsMap.get(key));\n    &#125;\n\n    switch (type) &#123;\n      case &quot;add&quot;:\n        if (isArray(target)) &#123;\n          if (isInteger(key)) &#123;\n            run(depsMap.get(&quot;length&quot;));\n            &#x2F;&#x2F; 如果页面中直接使用数组 会对length收集\n            &#x2F;&#x2F; 直接触发length就行\n          &#125;\n        &#125;\n        break;\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"computed\"><a href=\"#computed\" class=\"headerlink\" title=\"computed\"></a>computed</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; isFunction &#125; from &quot;..&#x2F;share&#x2F;index&quot;;\n\nimport &#123; effect, trigger, track &#125; from &quot;.&#x2F;effect&quot;;\n\nexport function computed(getterOrOptions) &#123;\n  let getter;\n  let setter;\n  if (isFunction(getterOrOptions)) &#123;\n    getter &#x3D; getterOrOptions;\n    setter &#x3D; () &#x3D;&gt; &#123;&#125;;\n  &#125; else &#123;\n    setter &#x3D; getterOrOptions.set;\n    getter &#x3D; getterOrOptions.get;\n  &#125;\n\n  let dirty &#x3D; true;\n  let computed;\n\n  let runner &#x3D; effect(getter, &#123;\n    lazy: true,\n    computed: true,\n    scheduler: () &#x3D;&gt; &#123;\n      if (!dirty) &#123;\n        dirty &#x3D; true;\n        trigger(computed, &quot;set&quot;, &quot;value&quot;); &#x2F;&#x2F; 更新变化\n      &#125;\n    &#125;,\n  &#125;);\n  let value;\n\n  computed &#x3D; &#123;\n    get value() &#123;\n      value &#x3D; runner();\n      dirty &#x3D; false;\n      track(computed, &quot;value&quot;); &#x2F;&#x2F; 收集\n      return value;\n    &#125;,\n    set value(newVal) &#123;\n      setter(newVal);\n    &#125;,\n  &#125;;\n\n  return computed;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"ref\"><a href=\"#ref\" class=\"headerlink\" title=\"ref\"></a>ref</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">import &#123; hasChange, isArray, isObject &#125; from &quot;..&#x2F;share&#x2F;index&quot;;\nimport &#123; track, trigger &#125; from &quot;.&#x2F;effect&quot;;\nimport &#123; reactive &#125; from &quot;.&#x2F;reactive&quot;;\n\nconst convert &#x3D; (val) &#x3D;&gt; (isObject(val) ? reactive(val) : val);\n\nclass RefImpl &#123;\n  public _value;\n  public _v_isRef &#x3D; true;\n  constructor(public rawValue, public shadow) &#123;\n    this._value &#x3D; shadow ? rawValue : convert(rawValue);\n  &#125;\n  &#x2F;&#x2F; 类的属性访问器\n\n  public get value(): string &#123;\n    track(this, &quot;value&quot;);\n    return this._value;\n  &#125;\n\n  public set value(newValue: string) &#123;\n    if (hasChange(newValue, this.rawValue)) &#123;\n      this.rawValue &#x3D; newValue;\n      this._value &#x3D; this.shadow ? newValue : convert(newValue);\n      trigger(this, &quot;set&quot;, &quot;value&quot;, newValue);\n    &#125;\n  &#125;\n&#125;\nfunction createRef(value, shallow &#x3D; false) &#123;\n  return new RefImpl(value, shallow);\n&#125;\nexport function ref(value) &#123;\n  return createRef(value);\n&#125;\n\nclass ObjectRefImpl &#123;\n  public __v_isRef &#x3D; true;\n  constructor(public target, public key) &#123;&#125;\n\n  public get value(): string &#123;\n    return this.target[this.key];\n  &#125;\n\n  public set value(v: string) &#123;\n    this.target[this.key] &#x3D; v;\n  &#125;\n&#125;\n\nexport function toRef(target, key) &#123;\n  return new ObjectRefImpl(target, key);\n&#125;\n\nexport function toRefs(object) &#123;\n  &#x2F;&#x2F; 数组或者对象\n  const ret &#x3D; isArray(object) ? new Array(object.length) : &#123;&#125;;\n  for (let key in object) &#123;\n    ret[key] &#x3D; toRef(object, key);\n  &#125;\n  return ret;\n&#125;\n</code></pre>\n\n\n\n<h2 id=\"share\"><a href=\"#share\" class=\"headerlink\" title=\"share\"></a>share</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">export const isObject &#x3D; (val: any) &#x3D;&gt;\n  typeof val &#x3D;&#x3D;&#x3D; &quot;object&quot; &amp;&amp; typeof val !&#x3D;&#x3D; null;\n\nexport const isSymbol &#x3D; (val: any) &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &quot;string&quot;;\n\nexport const isArray &#x3D; Array.isArray;\n\nexport const isInteger &#x3D; (key) &#x3D;&gt; &quot;&quot; + parseInt(key, 10) &#x3D;&#x3D;&#x3D; key;\nexport const hasOwnProperty &#x3D; Object.prototype.hasOwnProperty;\nexport const hasOwn &#x3D; (val, key) &#x3D;&gt; hasOwnProperty.call(val, key);\n\nexport const hasChange &#x3D; (newVal, oldVal) &#x3D;&gt; newVal !&#x3D;&#x3D; oldVal;\n\nexport const isFunction &#x3D; (val: any) &#x3D;&gt; typeof val &#x3D;&#x3D;&#x3D; &quot;function&quot;;\n</code></pre>\n\n","feature":null,"text":" vue3响应式API的简单实现 reactiveimport &#123; isObject, isSymbol, isArray, isInteger, hasOwnProperty, hasOwn, hasChange, &#125; from &quot;..&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#reactive\"><span class=\"toc-text\">reactive</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#effect\"><span class=\"toc-text\">effect</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#computed\"><span class=\"toc-text\">computed</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ref\"><span class=\"toc-text\">ref</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#share\"><span class=\"toc-text\">share</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{"title":"cssnext介绍以及使用","uid":"f7da3a6dbd8139fcbf33c613ff852d63","slug":"cssnext介绍以及使用","date":"2021-05-16T07:26:00.000Z","updated":"2021-05-16T07:39:59.060Z","comments":true,"path":"api/articles/cssnext介绍以及使用.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"什么是cssnext PostCSS-cssnext is a PostCSS plugin that helps you to use the latest CSS syntax today. It transforms new CSS specs into more comp...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}},"next_post":{"title":"vue+ts案例","uid":"8ff19d3d1f7a02625729a0691839588e","slug":"vue-ts案例","date":"2021-05-13T12:12:07.000Z","updated":"2021-05-13T12:38:15.619Z","comments":true,"path":"api/articles/vue-ts案例.json","keywords":null,"cover":"https://cdn.jsdelivr.net/gh/Maidang1/image@master/img/man-5984098_1920.jpg","text":"main.tsimport &#123; createApp &#125; from &quot;vue&quot;; import App from &quot;.&#x2F;App.vue&quot;; import router from &quot;.&#x2F;rout...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"15 mins."},"categories":[{"name":"vue","slug":"vue","count":5,"path":"api/categories/vue.json"}],"tags":[{"name":"vue","slug":"vue","count":3,"path":"api/tags/vue.json"},{"name":"ts","slug":"ts","count":1,"path":"api/tags/ts.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}