{"title":"函数式编程","uid":"78bf35c97e41da6a2bdad05b63951aa3","slug":"函数式编程","date":"2021-04-24T03:54:13.000Z","updated":"2021-04-24T03:54:13.650Z","comments":true,"path":"api/articles/函数式编程.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","content":"<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><blockquote>\n<p>对运算过程的抽象 x –&gt;f(联系,映射)–&gt; y y = f(x)</p>\n<p>用来描述数据之间的映射</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 非函数\nlet a &#x3D; 1;\nlet b &#x3D; 2;\nlet sum &#x3D; a + b;\nconsole.log(sum)\n\n&#x2F;&#x2F; 函数式\nfunction(a, b) &#123;\n    return a + b; &#x2F;&#x2F; 运算过程抽象\n&#125;\n\nlet sum &#x3D; add(2,3);\nconsole.log(sum)</code></pre>\n\n<h2 id=\"函数式第一等公民\"><a href=\"#函数式第一等公民\" class=\"headerlink\" title=\"函数式第一等公民\"></a>函数式第一等公民</h2><blockquote>\n<p>函数可以是变量 参数 返回值</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 函数赋值给变量\n\nlet fn &#x3D; function () &#123;\n  console.log(&quot;hello first-class function&quot;);\n&#125;;</code></pre>\n\n<h2 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h2><p><strong>函数作为参数</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function forEach(array, fn) &#123;\n  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n    fn(arr[i]);\n  &#125;\n&#125;\n\nlet arr &#x3D; [1, 2, 3, 4];\nforEach(arr, (item) &#x3D;&gt; &#123;\n  console.log(item);\n&#125;);\n\nfunction filter(arr, fn) &#123;\n  let res &#x3D; [];\n  for (let i &#x3D; 0; i &lt; arr.length; i++) &#123;\n    if (fn(arr[i])) &#123;\n      res.push(arr[i]);\n    &#125;\n  &#125;\n  return res;\n&#125;</code></pre>\n\n<p><strong>函数作为返回值</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function makeFn() &#123;\n  let msg &#x3D; &quot;hello function&quot;;\n  return function () &#123;\n    console.log(msg);\n  &#125;;\n&#125;\n\nmakeFn()();\n\n&#x2F;&#x2F; 让函数只执行一次\nfunction once(fn) &#123;\n  let done &#x3D; false;\n  return function () &#123;\n    if (!done) &#123;\n      return fn.apply(this, arguments);\n    &#125;\n  &#125;;\n&#125;</code></pre>\n\n<p><strong>高阶函数意义</strong></p>\n<blockquote>\n<p>屏蔽细节 只需要关注目标 用来抽象过程</p>\n</blockquote>\n<h2 id=\"常用的高阶函数\"><a href=\"#常用的高阶函数\" class=\"headerlink\" title=\"常用的高阶函数\"></a>常用的高阶函数</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; map\nconst map &#x3D; (arr, fn) &#x3D;&gt; &#123;\n  let res &#x3D; [];\n  for (let value of array) &#123;\n    res.push(fn(value));\n  &#125;\n  return res;\n&#125;;\n\nconst every &#x3D; (arr, fn) &#x3D;&gt; &#123;\n  let result &#x3D; true;\n  for (let value of array) &#123;\n    result &#x3D; fn(value);\n    if (!result) break;\n  &#125;\n  return result;\n&#125;;\n\nconst some &#x3D; (arr, fn) &#x3D;&gt; &#123;\n  let result &#x3D; false;\n  for (let value of array) &#123;\n    result &#x3D; fn(value);\n    if (result) break;\n  &#125;\n  return result;\n&#125;;</code></pre>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">function fn()&#123;\n    let count &#x3D; 1;\n    return function()&#123;\n        console.log(count);\n        count ++;\n    &#125;\n\n&#125;</code></pre>\n\n<h2 id=\"纯函数\"><a href=\"#纯函数\" class=\"headerlink\" title=\"纯函数\"></a>纯函数</h2><blockquote>\n<p>相同的输入永远会有相同的输出 同时没有副作用</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; slice(纯函数) splice(不纯的函数)\n&#x2F;&#x2F; 中间的变量是不可变得 没有记录 无状态的</code></pre>\n\n<p><strong>Lodash</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const _ &#x3D; require(&quot;lodash&quot;);\nconst array &#x3D; [&quot;jack&quot;, &quot;tom&quot;];\n\nconsole.log(_.first(array));\nconsole.log(_last(array));\nconsole.log(_reverse(array));\n_.each(array, (item, index) &#x3D;&gt; &#123;\n  console.log(item, index);\n&#125;);</code></pre>\n\n<p><strong>纯函数缓存</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const _ &#x3D; require(&quot;lodash&quot;);\n\nfunction getArea(r) &#123;\n  return Math.PI * r * r;\n&#125;\nlet getAreaWithMemory &#x3D; _.memoize(getArea);\n\n&#x2F;&#x2F; 缓存函数实现\n\nfunction memoize(f) &#123;\n  let cache &#x3D; &#123;&#125;;\n  return function () &#123;\n    let key &#x3D; JSON.stringify(arguments);\n    cache[key] &#x3D; cache[key] || f.apply(f, arguments);\n    return cache[key];\n  &#125;;\n&#125;</code></pre>\n\n<p><strong>柯里化函数</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function checkAge(age) &#123;\n  let min &#x3D; 19;\n  return age &gt;&#x3D; min;\n&#125;\n\nfunction checkAge(min) &#123;\n  return function (age) &#123;\n    return age &gt;&#x3D; min;\n  &#125;;\n&#125;\n\nconst checkAge &#x3D; (min) &#x3D;&gt; (age) &#x3D;&gt; age &gt;&#x3D; min;\n&#x2F;&#x2F; lodash 中的柯里化\n\nconst _ &#x3D; require(&quot;lodash&quot;);\n\nfunction getSum(a, b, c) &#123;\n  return a + b + c;\n&#125;\n\nconst curried &#x3D; _.curry(getSum);\nconsole.log(curried(1)(2)(3));\n\n&#x2F;&#x2F; 柯里化案例\n\nconst match &#x3D; _.curry((reg, str) &#x3D;&gt; &#123;\n  return str.match(reg);\n&#125;);\n\nconst haveSpace &#x3D; match(&#x2F;\\s+&#x2F;g);\nconst haveNumber &#x3D; match(&#x2F;\\d+&#x2F;g);\n\nconst filter &#x3D; _.curry((func, array) &#x3D;&gt; &#123;\n  return array.filter(func);\n&#125;);\n\nconst findSpace &#x3D; filter(haveSpace);\nconst findNumber &#x3D; filter(haveNumber);</code></pre>\n\n<p><strong>实现函数柯里化</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function curry(func) &#123;\n  return function curriedFn(...args) &#123;\n    &#x2F;&#x2F; 判断实参的个数\n    if (args.length &lt; func.length) &#123;\n      return function () &#123;\n        return curriedFn(...args.concat(Array.form(arguments)));\n      &#125;;\n    &#125; else &#123;\n      return func(...args);\n    &#125;\n  &#125;;\n&#125;</code></pre>\n\n<p><strong>函数组合</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">function compose(f, g) &#123;\n  return function (value) &#123;\n    return f(g(value));\n  &#125;;\n&#125;\n\nfunction reverse(arr) &#123;\n  return arr.reverse();\n&#125;\n\nfunction first(arr) &#123;\n  return arr[0];\n&#125;\n\nconst last &#x3D; compose(first, reverse);\n\n&#x2F;&#x2F; 实现组合函数\n\nfunction compose(...args) &#123;\n  return function(value) &#123;\n    return args.reverse().reduce((acc, fn) &#x3D;&gt; &#123;\n      return fn(acc)\n    &#125;,value)\n  &#125;\n&#125;\n\n\n&#x2F;&#x2F; 函数有结合律\n</code></pre>\n\n<p><strong>fp</strong></p>\n<blockquote>\n<p>函数在前 数据在后</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fp &#x3D; require(&#39;lodash&#x2F;fp&#39;);\nfp.split(&#39; &#39;)(&#39;this is a string&#39;)</code></pre>\n\n\n\n<p><strong>Point Free</strong></p>\n<blockquote>\n<p>不需要指定处理的数据</p>\n<p>只需要合成运算的过程</p>\n<p>只需要定义一些基本的运算函数</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fp &#x3D; fp.flowRight(fp.join(&#39;-&#39;),fp.map(fp.toLower),fp.split(&#39; &#39;));\nconst f &#x3D; fp.flowRight(fp.replace(&#x2F;\\s+&#x2F;,&#39;_&#39;), fp.toLower);\nconst firstLetterToUpper &#x3D; fp.flowRight(fp.join(&#39;. &#39;),fp.map(fp.flowRight(fp.first,fp.toUpper))fp.split(&#39; &#39;))</code></pre>\n\n\n\n<h2 id=\"函子-Functor\"><a href=\"#函子-Functor\" class=\"headerlink\" title=\"函子(Functor)\"></a>函子(Functor)</h2><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Container &#123;\n    constructor(value) &#123;\n        this._value &#x3D; value;\n    &#125;\n    map(fn) &#123;\n        return new Container(fn(this.value))\n    &#125;\n&#125;\n\n&#x2F;&#x2F; 2\n\nclass Container() &#123;\n    static of (value) &#123;\n        return new Container(value)\n    &#125;\n     constructor(value) &#123;\n        this._value &#x3D; value;\n    &#125;\n    map(fn) &#123;\n        return Container.of(fn(this.value))\n    &#125;\n&#125;\n&#x2F;&#x2F; 空值问题</code></pre>\n\n\n\n<p><strong>Maybe函子</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F; 处理空值异常\nclass MayBe() &#123;\n    static of(value) &#123;\n        return new MayBe(value)\n    &#125;\n    constructor(value) &#123;\n        this._value &#x3D; value;\n    &#125;\n    \n    map(fn) &#123;\n        return this.isNothing(this._value)?\n        \tMayBe.of(null)\n            : MayBe.of(fn(this._value))\n    &#125;\n    isNothing() &#123;\n        return this._value &#x3D;&#x3D;&#x3D; null || this._value &#x3D;&#x3D;&#x3D; undefined\n    &#125;\n&#125;\n&#x2F;&#x2F; 不清楚空值出现的位置</code></pre>\n\n<p><strong>Either函子</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">class Left() &#123;\n    static of(value) &#123;\n        return new Left(value)\n    &#125;\n    constructor(value) &#123;\n        this._value &#x3D; value\n    &#125;\n    map(fn) &#123;\n        return this\n    &#125;\n&#125;\n\nclass Right() &#123;\n    static of(value) &#123;\n        return new Right(value)\n    &#125;\n    constructor(value) &#123;\n        this._value &#x3D; value;\n    &#125;\n    map(fn) &#123;\n        return Right.of(fn(this._value))\n    &#125;\n&#125;\n\nfunction parseJSON(str) &#123;\n    try &#123;\n        return Right.of(JSON.parse(str))\n    &#125; catch(e) &#123;\n        return Left.of(&#123;message:e.message&#125;)\n    &#125;\n&#125;\n</code></pre>\n\n<p><strong>IO函子</strong></p>\n<blockquote>\n<p>IO函子中的_value是一个函数 把函数当成值来处理</p>\n<p>IO函子可以把不纯的动作存储到_value中 延迟执行不纯的操作</p>\n<p>把不纯的操作交给调用者来处理</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fp &#x3D; require(&#39;lodash&#x2F;fp&#39;)\n\nclass IO &#123;\n    static of(x) &#123;\n        return new IO(()&#x3D;&gt; x)\n    &#125;\n    constructor(fn) &#123;\n        this._value &#x3D; fn;\n    &#125;\n    map(fn) &#123;\n    \treturn IO.of(fp.flowRight(fn, this._value))   \n    &#125;\n&#125;\nlet r &#x3D; IO.of(process).map(p&#x3D;&gt;p.execPath)\nconsole.log(r._value())</code></pre>\n\n<p><strong>folktale</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const &#123; compose, curry &#125; &#x3D; require(&#39;folktale&#x2F;core&#x2F;lambda&#39;)\n\n&#x2F;&#x2F; task函子 异步任务\nconst fs &#x3D; require(&#39;fs&#39;)\nconst &#123; task &#125; &#x3D; require(&#39;folktale&#x2F;concurrency&#x2F;task&#39;)\nconst &#123; split, find&#125; &#x3D; require(&#39;lodash&#x2F;fp&#39;)\nfunction readFile(filename) &#123;\n    return task(resolver &#x3D;&gt; &#123;\n        fs.readFile(filename, &#39;utf-8&#39;,(err,data)&#x3D;&gt; &#123;\n            if(err) resolver.reject(err)\n            resolver(resolve(data))\n        &#125;)\n    &#125;)\n&#125;\n\nreadFile(&#39;.&#x2F;xxxx&#39;)\n\t.map(fplit(&#39; &#39;))\n\t.map(find(x&#x3D;&gt;x.includes(&#39;version&#39;)))\n\t.run()\n\t.listen((err)&#x3D;&gt;&#123;&#125;, (value)&#x3D;&gt;&#123;&#125;)\n\n&#x2F;&#x2F; 问题\n\nlet readFile &#x3D; function(file)&#123;\n    return new IO(function()&#123;\n        return fs.readFileSync(file,&#39;utf-8&#39;)\n    &#125;)\n&#125;\nlet print &#x3D; function(x)&#123;\n    return new IO(function()&#123;\n        console.log(x);\n        return x\n    &#125;)\n&#125;\nlet cat &#x3D; fp.flowRight(print, readFile)\nlet r &#x3D; cat(&#39;package.json&#39;)._value()._value();\nconsole.log(r)</code></pre>\n\n<p><strong>Pointed函子</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">&#x2F;&#x2F; 实现了用of创建数据</code></pre>\n\n<p><strong>Monad函子</strong></p>\n<blockquote>\n<p>Monad函子可以是变扁的Pointed函子</p>\n<p>一个函子如果有join何of函子的话就是一个monad函子</p>\n</blockquote>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">const fp &#x3D; require(&#39;lodash&#x2F;fp&#39;)\nconst fs &#x3D; require(&#39;fs&#39;)\nclass IO &#123;\n    static of(x) &#123;\n        return new IO(()&#x3D;&gt; x)\n    &#125;\n    constructor(fn) &#123;\n        this._value &#x3D; fn;\n    &#125;\n    map(fn) &#123;\n    \treturn IO.of(fp.flowRight(fn, this._value))   \n    &#125;\n    join() &#123;\n        return this._value;\n    &#125;\n    flatMap(fn)&#123;\n        return this.map(fn).join()\n    &#125;\n&#125;\n\nlet r &#x3D; readFile(&#39;xxx&#39;)\n\t.map(x &#x3D;&gt; x.toUpperCase())\n\t.flatMap(print)\n\t.join()\nconsole.log(r);</code></pre>\n\n\n\n","feature":null,"text":"函数式编程 对运算过程的抽象 x –&gt;f(联系,映射)–&gt; y y = f(x) 用来描述数据之间的映射 &#x2F;&#x2F; 非函数 let a &#x3D; 1; let b &#x3D; 2; let sum &#x3D; a + b; console.lo...","link":"","photos":[],"count_time":{"symbolsCount":"8.9k","symbolsTime":"8 mins."},"categories":[{"name":"JavaScript","slug":"JavaScript","count":5,"path":"api/categories/JavaScript.json"}],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"函数式编程","slug":"函数式编程","count":1,"path":"api/tags/函数式编程.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">函数式编程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%AC%AC%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91\"><span class=\"toc-text\">函数式第一等公民</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">高阶函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E7%94%A8%E7%9A%84%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">常用的高阶函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">闭包</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AF%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">纯函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E5%AD%90-Functor\"><span class=\"toc-text\">函子(Functor)</span></a></li></ol>","author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""},"mapped":true,"prev_post":{},"next_post":{"title":"用typescript 增强vuex的类型","uid":"bbd6549d987a6d65496504fcf8d06748","slug":"vue-ts","date":"2021-04-14T02:36:02.000Z","updated":"2021-04-14T02:36:02.760Z","comments":true,"path":"api/articles/vue-ts.json","keywords":null,"cover":"http://img-blog.csdnimg.cn/20200716163610402.jpg","text":"index.tsimport &#123; createStore &#125; from &#39;vuex&#39;; import &#123; modules &#125; from &#39;.&#x2F;modules&#39;; import &#123; user...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[{"name":"vue","slug":"vue","count":3,"path":"api/categories/vue.json"}],"tags":[{"name":"typescript","slug":"typescript","count":1,"path":"api/tags/typescript.json"},{"name":"vuex","slug":"vuex","count":2,"path":"api/tags/vuex.json"}],"author":{"name":"麦当","avatar":"https://cdn.jsdelivr.net/gh/Maidang1/image//image/avatar.jpg","link":""}}}